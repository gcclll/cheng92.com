#+TITLE: My MacOS
#+DATE: <2021-07-01 20:12:38>
#+TAGS[]: macos
#+CATEGORIES[]: macos
#+LANGUAGE: zh-cn
#+STARTUP: indent

#+begin_example
😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀
MacOS 系统相关的东西
😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀😀
#+end_example

#+begin_export html
<script src="/js/utils.js"></script>
<script src="/js/vue/vue-next.js"></script>
<script>
insertCssLink("https://unpkg.com/element-plus/lib/theme-chalk/index.css");
insertCssLink("/js/vue/css/awesome.css");
</script>
<script src="https://unpkg.com/element-plus/lib/index.full.js"></script>
<script src="/js/vue/awesome/common.js"></script>
#+end_export

* CLI
** [[https://github.com/jarun/bcal#installation][bcal]], 字节计算，转换

bcal 进入或直接使用 ~$ bcal <expr> ...~ :

#+begin_src sh
╭─simon at gcl in ~/.doom.d on native✘✘✘ 21-07-22 - 15:24:39
╰─⠠⠵ bcal                                                                     ~/.doom.d
q/double Enter -> quit, ? -> help
bcal> "(5kb+10mb)"
                                10005000 B

            IEC standard (base 2)

                        9.7705078125e+03 KiB
                        9.5415115356e+00 MiB
                        9.3178823590e-03 GiB
                        9.0994944912e-06 TiB

            SI standard (base 10)

                                   10005 kB
                        1.0005000000e+01 MB
                        1.0005000000e-02 GB
                        1.0005000000e-05 TB

ADDRESS
 (d) 10005000
 (h) 0x98aa08
bcal>
#+end_src

使用方式，采用各种表达式方式：

1. 支持数学计算

    #+begin_src sh
    $ bcal "(5kb+2mb)/3"
    $ bcal "5 tb / 12"
    $ bcal "2.5mb*3"
    ╰─⠠⠵ bcal "2.5mb*3"                                                           ~/.doom.d
    RESULT
                                    7500000 B

                IEC standard (base 2)

                            7.3242187500e+03 KiB
                            7.1525573730e+00 MiB
                            6.9849193096e-03 GiB
                            6.8212102633e-06 TiB

                SI standard (base 10)

                                        7500 kB
                            7.5000000000e+00 MB
                            7.5000000000e-03 GB
                            7.5000000000e-06 TB

    ADDRESS
    (d) 7500000
    (h) 0x7270e0

    $ bcal "(2giB * 2) / (2kib >> 2)"
    ╰─⠠⠵ bcal "(2giB * 2) / (2kib >> 2)"                                          ~/.doom.d
    8388608
    #+end_src

2. 转成其它格式，单位大小写敏感

   #+begin_src sh
    $ bcal 20140115 b
    $ bcal 0x1335053 B
    $ bcal 0xaabbcc kb
    $ bcal 0xdef Gib

    ╭─simon at gcl in ~/.doom.d on native✔ 21-07-22 - 15:39:04
    ╰─⠠⠵ bcal 20140115 b                                                          ~/.doom.d
    UNIT CONVERSION
                                    20140115 B

                IEC standard (base 2)

                            1.9668081055e+04 KiB
                            1.9207110405e+01 MiB
                            1.8756943755e-02 GiB
                            1.8317327886e-05 TiB

                SI standard (base 10)

                            2.0140115000e+04 kB
                            2.0140115000e+01 MB
                            2.0140115000e-02 GB
                            2.0140115000e-05 TB

    ADDRESS
    (d) 20140115
    (h) 0x1335053

    LBA:OFFSET (sector size: 0x200)
    (d) 39336:83
    (h) 0x99a8:0x53
   #+end_src

3. 指定区块大小

   #+begin_src sh
    $ bcal 0xaabbcc kb -s 4096
   #+end_src

4. LBA 转成 CHS:

    #+begin_src sh
    $ bcal -f l500
    $ bcal -f l0x600-18-0x7e
    $ bcal -f l0x300-0x12-0x7e

    # result:
    ╭─simon at gcl in ~/.doom.d on native✔ 21-07-22 - 15:32:44
    ╰─⠠⠵ bcal -f l500                                                             ~/.doom.d
    LBA2CHS
    LBA:500  MAX_HEAD:16  MAX_SECTOR:63
    CHS: (d) 0 7 60, (h) 0x0 0x7 0x3c
    #+end_src

5. CHS 转成 LBA

   #+begin_src sh
    $ bcal -f l500
    $ bcal -f l0x600-18-0x7e
    $ bcal -f l0x300-0x12-0x7e

    # result:
    ╭─simon at gcl in ~/.doom.d on native✔ 21-07-22 - 15:40:28
    ╰─⠠⠵ bcal -f l0x300-0x12-0x7e                                                 ~/.doom.d
    LBA2CHS
    LBA:768  MAX_HEAD:18  MAX_SECTOR:126
    CHS: (d) 0 6 13, (h) 0x0 0x6 0xd
   #+end_src

6. 显示一个数据的2进制，10 进制和 16 进制表示形式

   *b* (2进制), *d* (十进制), *h* (16进制)。

   #+begin_src sh
    $ bcal -c 20140115
    ╭─simon at gcl in ~/.doom.d on native✔ 21-07-22 - 15:44:32
    ╰─⠠⠵ bcal -c 20140115                                                         ~/.doom.d
    (b) 0b1001100110101000001010011
    (d) 20140115
    (h) 0x1335053

    $ bcal -c 0b1001100110101000001010011
    ╭─simon at gcl in ~/.doom.d on native✔ 21-07-22 - 15:44:14
    ╰─⠠⠵ bcal -c 0b1001100110101000001010011                                      ~/.doom.d
    (b) 0b1001100110101000001010011
    (d) 20140115
    (h) 0x1335053

    $ bcal -c 0x1335053

    ╭─simon at gcl in ~/.doom.d on native✔ 21-07-22 - 15:42:10
    ╰─⠠⠵ bcal -c 0x1335053                                                        ~/.doom.d
    (b) 0b1001100110101000001010011
    (d) 20140115
    (h) 0x1335053
   #+end_src

   交互模式：
   #+begin_src sh
    q/double Enter -> quit, ? -> help
    bcal> c 20140115 # 直接使用对应的选项
   #+end_src

7. 执行 ~bc~, 在交互模式下输入 ~b~

   #+begin_src sh
    $ bcal -b '3.5 * 2.1 + 5.7'
    bcal> b
    bc vars: scale = 10, ibase = 10, last = r
    bc> 3.5 * 2.1 + 5.7
   #+end_src

8. 管道输入，结果给 *bcal* 处理

   #+begin_src sh
   $ printf '15 kib + 15 gib \n r / 5' | bcal -m
   $ printf '15 + 15 + 2' | bcal -bm
   #+end_src

9. 从文件获取输入给 *bcal*

   #+begin_src sh
    $ cat expr
    15 gib + 15 kib
    r / 5
    $ bcal -m < expr
   #+end_src

* Nix

install:

[[https://nixos.org/][NixOS - NixOS Linux]]

[[https://zhuanlan.zhihu.com/p/88886592][Nix on macOS, Made Easy - 知乎]]

[[https://wickedchicken.github.io/post/macos-nix-setup/][MacOS Nix Setup (an alternative to Homebrew)]]

~$ curl -L https://nixos.org/nix/install | sh~

新系统不能安装问题，无权限创建 ~/nix~

~$ sh <(curl -L https://nixos.org/nix/install) --darwin-use-unencrypted-nix-store-volume~

#+begin_example
Creating volume and mountpoint /nix.

     ------------------------------------------------------------------
    | This installer will create a volume for the nix store and        |
    | configure it to mount at /nix.  Follow these steps to uninstall. |
     ------------------------------------------------------------------

  1. Remove the entry from fstab using 'sudo vifs'
  2. Destroy the data volume using 'diskutil apfs deleteVolume'
  3. Remove the 'nix' line from /etc/synthetic.conf or the file

  ...

Installation finished!  To ensure that the necessary environment
variables are set, either log in again, or type

  . /Users/simon/.nix-profile/etc/profile.d/nix.sh

in your shell.
#+end_example

完成之后：

#+begin_example
# simon @ gcl in ~ [20:18:32]
$ nix
Usage: nix <COMMAND> <FLAGS>... <ARGS>...

Common flags:
      --debug                  enable debug output
      --help                   show usage information
      --help-config            show configuration options
      --no-net                 disable substituters and consider all previously downloaded files up-to-date
      --option <NAME> <VALUE>  set a Nix configuration option (overriding nix.conf)
  -L, --print-build-logs       print full build logs on stderr
      --quiet                  decrease verbosity level
  -v, --verbose                increase verbosity level
      --version                show version information

In addition, most configuration settings can be overriden using '--<name> <value>'.
Boolean settings can be overriden using '--<name>' or '--no-<name>'. See 'nix
--help-config' for a list of configuration settings.

Available commands:
  add-to-store     add a path to the Nix store
  build            build a derivation or fetch a store path
  cat-nar          print the contents of a file inside a NAR file
  cat-store        print the contents of a store file on stdout
  copy             copy paths between Nix stores
  copy-sigs        copy path signatures from substituters (like binary caches)
  doctor           check your system for potential problems
  dump-path        dump a store path to stdout (in NAR format)
  edit             open the Nix expression of a Nix package in $EDITOR
  eval             evaluate a Nix expression
  hash-file        print cryptographic hash of a regular file
  hash-path        print cryptographic hash of the NAR serialisation of a path
  log              show the build log of the specified packages or paths, if available
  ls-nar           show information about the contents of a NAR file
  ls-store         show information about a store path
  optimise-store   replace identical files in the store by hard links
  path-info        query information about store paths
  ping-store       test whether a store can be opened
  repl             start an interactive environment for evaluating Nix expressions
  run              run a shell in which the specified packages are available
  search           query available packages
  show-config      show the Nix configuration
  show-derivation  show the contents of a store derivation
  sign-paths       sign the specified paths
  to-base16        convert a hash to base-16 representation
  to-base32        convert a hash to base-32 representation
  to-base64        convert a hash to base-64 representation
  to-sri           convert a hash to SRI representation
  upgrade-nix      upgrade Nix to the latest stable version
  verify           verify the integrity of store paths
  why-depends      show why a package has another package in its closure

Note: this program is EXPERIMENTAL and subject to change.
#+end_example

安装 nix-darwin:

#+begin_src bash
nix-build https://github.com/LnL7/nix-darwin/archive/master.tar.gz -A installer
./result/bin/darwin-installer
#+end_src

配置： ~/Users/simon/.nixpkgs/darwin-configuration.nix~

#+begin_example
{ config, pkgs, ... }:

{
  # List packages installed in system profile. To search by name, run: $ nix-env -qaP | grep wget
  environment.systemPackages =
    [ pkgs.vim
    ];

  # Use a custom configuration.nix location. $ darwin-rebuild switch -I
  # darwin-config=$HOME/.config/nixpkgs/darwin/configuration.nix environment.darwinConfig =
  # "$HOME/.config/nixpkgs/darwin/configuration.nix";

  # Auto upgrade nix package and the daemon service. services.nix-daemon.enable = true;
  # nix.package = pkgs.nix;

  # Create /etc/bashrc that loads the nix-darwin environment.
  programs.zsh.enable = true; # default shell on catalina
  # programs.fish.enable = true;

  # Used for backwards compatibility, please read the changelog before changing. $ darwin-rebuild
  # changelog
  system.stateVersion = 4;
}
#+end_example

配置文件每次修改之后要执行 ~darwin-rebuild switch~ 生效。

更新包: ~nix-channel --update~
* awesome tools

https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md

example:
#+begin_src html
<div id="test"></div>
<script src="/path/to/test.js"></script>
#+end_src

** Share VPN

Parallel Desktop - Ubuntu share the VPN of host computer.

Ubuntu -> 设置 -> 网络 -> VPN: Network Proxy, 网络代理：

http/https, socks proxy:

IP: 宿主机的 IP，推荐配置成静态IP。

PORT: 代理工具的端口号，比如： clashX 的 *7890/7891*

完了之后还要在代码工具那允许下局域网连接：

[[/img/tmp/clashx-allow-lan.png]]

** 窗口管理

#+begin_export html
<div id="mac-window"></div>
<script src="/js/vue/awesome/mac-window.js"></script>
#+end_export
* ubuntu

** [[https://www.cnblogs.com/yxqxx/p/12319130.html][修改家目录和主机名]]

假设当前名字为 ~parallels~ (安装虚拟机的时候默认是这个), 将基修改为： ~simon~

1. ~$ su~ , 切换 root
2. ~$ passwd <user>~, 修改密码
3. ~$ reboot~, 重启
4. ~$ su~
5. ~$ vim /etc/passwd~, 找到 ~parallels~ 那一行， *只修改用户名为 simon，其它不要动*
6. ~$ vim /etc/shadow~, 找到 ~parallels~ 那一行，同样只修改用户名为 simon
7. ~$ vim /etc/group~, 找到所有的 ~parallels~, 使用 ~:%s/parallels/simon/g~ 全局替换
8. ~$ reboot~, 重启
9. ~$ vim /etc/hostname~ 修改成想要的主机名
10. ~$ vim /etc/passwd~ 找到 ~simon~ 那一行(这里用户名已经经过上面的修改成了 ~simon~)，
    修改目录名
11. ~$ cd /home~
12. ~$ mv parallels simon~, 修改家目录名字
13. ~$ reboot~, OK.


可能的问题（我没遇到）：修改主目录名时候，只修改了 ~/etc/password~ 而没有给
~/home/parallels~ 重命名，导致开机后一直登陆蛤面循环。

*解* ： ~Ctrl+Alt+[F1~F6]~ 登陆后直接修改 ~/home/parallels~, 重启。

~Ctrl+Alt+F7~ 进入图形模式。
