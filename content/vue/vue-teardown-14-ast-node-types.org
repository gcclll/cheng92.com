#+TITLE: Vue3 功能拆解⑭ AST Node Types 各种节点类型详解
#+DATE: <2021-08-10 11:26:43>
#+TAGS[]: vue3, vue-next,
#+CATEGORIES[]: vue
#+LANGUAGE: zh-cn
#+STARTUP: indent

#+begin_export html
<link href="https://fonts.goo~gleapis.com/cs~s2?family=ZCOOL+XiaoWei&display=swap" rel="stylesheet">
<link href="/js/vue/formatters-styles/style.css" rel="stylesheet">
<link href="/js/vue/formatters-styles/annotated.css" rel="stylesheet">
<link href="/js/vue/formatters-styles/html.css" rel="stylesheet">
<kbd>
<font color="blue" size="3" style="font-family: 'ZCOOL XiaoWei', serif;">
诗号：六道同坠，魔劫万千，引渡如来。
</font>
</kbd><br><br>
<script src="/js/utils.js"></script>
<script src="/js/vue/vue-next.js"></script>
<script type='text/javascript' src="https://cdn.jsdelivr.net/npm/jsondiffpatch/dist/jsondiffpatch.umd.min.js"></script>
<script src="/js/vue/tests/common.js"></script>
#+end_export

[[/img/bdx/yiyeshu-001.jpg]]

#+begin_quote
本文内容主要讲述的是 compiler-core 中模板解析过程中涉及到的各种表达式。比如：
~<div/>~ 最后被解析成什么 ast 结构，最后又被生成怎么样的 render 函数的一整个流程详
解。通过该文当你看到一个 HTML 模板的时候你的脑海里应该能浮现最后 render 函数大
概样子，或者你应该能具备了根据模板手写 render 函数的能力。
#+end_quote

本文涉及的源码包： [[https://github.com/vuejs/vue-next/tree/master/packages/compiler-core][compiler-core]] 。

* 所有类型：

类型声明： _compiler-core/src/ast.ts:NodeTypes_

| Type                      | Description         |
|---------------------------+---------------------|
| ~ROOT~                      | -                   |
| ~ELEMENT~                   | -                   |
| ~TEXT~                      | -                   |
| ~COMMENT~                   | -                   |
| ~SIMPLE_EXPRESSION~         | -                   |
| ~INTERPOLATION~             | interpolation node  |
| ~ATTRIBUTE~                 | property of element |
|---------------------------+---------------------|
| containers:               | -                   |
| ~COMPOUND_EXPRESSION~       | compound expression |
| ~IF~                        | v-if                |
| ~IF_BRANCH~                 | v-else, v-else-if   |
| ~FOR~                       | v-for               |
| ~TEXT_CALL~                 | -                   |
| ~JS_CALL_EXPRESSION~        | -                   |
| ~JS_OBJECT_EXPRESSION~      | -                   |
| ~JS_PROPERTY~               | -                   |
| ~JS_ARRAY_EXPRESSION~       | -                   |
| ~JS_FUNCTION_EXPRESSION~    | -                   |
| ~JS_CONDITIONAL_EXPRESSION~ | -                   |
| ~JS_CACHE_EXPRESSION~       | -                   |
|---------------------------+---------------------|
| ssr codegen               | -                   |
| ~JS_BLOCK_STATEMENT~        | -                   |
| ~JS_TEMPLATE_LITERAL~       | -                   |
| ~JS_IF_STATEMENT~           | -                   |
| ~JS_ASSIGNMENT_EXPRESSION~  | -                   |
| ~JS_SEQUENCE_EXPRESSION~    | -                   |
| ~JS_RETURN_STATEMENT~       | -                   |
* TODO
