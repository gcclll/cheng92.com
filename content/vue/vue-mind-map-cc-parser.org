#+TITLE: Vue3 源码头脑风暴之 2 ☞compiler-core - ast parser
#+DATE: <2020-11-24 15:33:33>
#+TAGS[]: vue, vue3, compiler-core, parser, compiler
#+CATEGORIES[]: vue
#+LANGUAGE: zh-cn
#+STARTUP: indent

#+begin_export html
<link href="https://fonts.goo~gleapis.com/cs~s2?family=ZCOOL+XiaoWei&display=swap" rel="stylesheet">
<kbd>
<font color="blue" size="3" style="font-family: 'ZCOOL XiaoWei', serif;">
  诗号：六道同坠，魔劫万千，引渡如来。
</font>
</kbd><br><br>
#+end_export

[[/img/bdx/yiyeshu-001.jpg]]

@@html:<kbd>@@
*[[https://github.com/gcclll/stb-vue-next][stb-vue-next]] 完全拷贝于 [[https://github.com/vuejs/vue-next][vue-next]] ，主要目的学习及尝试应用于机顶盒环境。*
@@html:</kbd>@@

@@html:<kbd>@@ *本文依据 commit 进程进行记录，只要跟着下面的进程走，你将能完整实
现 vue ast parser 哦 💃🏼💃🏼💃🏼* @@html:</kbd>@@

#+begin_quote
声明：该篇为 ts 源码(/commit/)版本，之前做过一遍完整的 js 版本，更详细，也可参考

[[https://www.cheng92.com/vue/vue3-source-code-compiler-core-parse_ts/][Vue3.0 源码系列（二）编译器核心 - Compiler core 1: parse.ts - 若叶知秋]]

#+end_quote

#+begin_export html
<script src="/js/vue/compiler-core.global.js"></script>
#+end_export

* 脑图

[[/img/vue3/compiler-core/compiler-core-parser.svg]]

* compiler-core parser 初始化

[[/vue/vue3-source-code-compiler-core-parse_ts/][Vue3.0 源码系列（二）编译器核心 - Compiler core 1: parse.ts]]

- [X] [[https://github.com/gcclll/stb-vue-next/commit/c0a03af10f286181f0618313bb319f1725708969][c0a03af]] add baseParse declaration

     [[https://github.com/gcclll/stb-vue-next/commit/c0a03af10f286181f0618313bb319f1725708969][feat(add): baseParse declaration · gcclll/stb-vue-next@c0a03af]]

    添加 ~baseParse()~ 函数声明：

    #+begin_src typescript
    export function baseParse(content: string, options: ParserOptions): RootNode {
        return {} as RootNode
    }
    #+end_src
- [X] [[https://github.com/gcclll/stb-vue-next/commit/cb2d452526ee77706e1bf27f22a6ff33c94e268c][cb2d452]] init baseParse function

    [[https://github.com/gcclll/stb-vue-next/commit/cb2d452526ee77706e1bf27f22a6ff33c94e268c][feat: baseParse function · gcclll/stb-vue-next@cb2d452]]

    增加 ~baseParse~ 函数实现，和涉及到的一些函数和类型声明。

    #+begin_src typescript
    export function baseParse(content: string, options: ParserOptions): RootNode {
        const context = createParserContext(content, options)
        const start = getCursor(context)
        return createRoot(
            parseChildren(context, TextModes.DATA, []),
            getSelection(context, start)
        )
    }
    #+end_src
* [[https://github.com/gcclll/stb-vue-next/commit/870343cf5165be6cb7e24c413b128eee2e4f8c9a][870343c]] add parseChildren function

[[https://github.com/gcclll/stb-vue-next/commit/870343cf5165be6cb7e24c413b128eee2e4f8c9a][feat(init): parseChildren function · gcclll/stb-vue-next@870343c]]

* [[https://github.com/gcclll/stb-vue-next/commit/4c6009d881110919d4be817c08e3e2f81feaf816][4c6009d]] add pure text parser(parseText, parseTextData)

[[https://github.com/gcclll/stb-vue-next/commit/4c6009d881110919d4be817c08e3e2f81feaf816][feat(add): parseText, parseTextData · gcclll/stb-vue-next@4c6009d]]

fix lint errors: [[https://github.com/gcclll/stb-vue-next/commit/005c2612e37f2724d063fab4c239414a01fd8d14][005c261]]

[[https://github.com/gcclll/stb-vue-next/commit/005c2612e37f2724d063fab4c239414a01fd8d14][fix: lint errors · gcclll/stb-vue-next@005c261]]

新增了三个函数：

1. ~pushNode(nodes: TemplateChildNode[], node: TemplateChildNode): void~

   遍历 while 解析后的 ast ，合并相邻的文本节点。

   #+begin_src typescript
    function pushNode(nodes: TemplateChildNode[], node: TemplateChildNode): void {
        if (node.type === NodeTypes.TEXT) {
            // 合并两个相邻的文本内容

            const prev = last(nodes)
            // Merge if both this and the previous node are text and those are
            // consecutive. This happens for cases like "a < b".
            if (
            prev &&
            prev.type === NodeTypes.TEXT &&
            prev.loc.end.offset === node.loc.start.offset
            ) {
            prev.content += node.content
            prev.loc.end = node.loc.end
            prev.loc.source += node.loc.source
            return
            }
        }

        nodes.push(node)
    }
   #+end_src

2. ~parseText(context: ParserContext, mode: TextModes): TextNode~

   解析文本节点，文本节点结束标识： ~<~ 和 ~{{~ ，分别代表标签和插值开始符号。

   如： ~some text<div>....~, ~some text{{ ... }}~

   #+begin_src typescript
    function parseText(context: ParserContext, mode: TextModes): TextNode {
        __TEST__ && assert(context.source.length > 0)

        const endTokens = ['<', context.options.delimiters[0]]
        if (mode === TextModes.CDATA) {
            endTokens.push(']]>')
        }

        let endIndex = context.source.length
        // 找到遇到的第一个结束符 }}, <
        for (let i = 0; i < endTokens.length; i++) {
            const index = context.source.indexOf(endTokens[i], 1)
            if (index !== -1 && endIndex > index) {
            endIndex = index
            }
        }

        __TEST__ && assert(endIndex > 0)

        const start = getCursor(context)
        const content = parseTextData(context, endIndex, mode)

        return {
            type: NodeTypes.TEXT,
            content,
            loc: getSelection(context, start)
        }
    }
   #+end_src
   
3. ~function parseTextData(context: ParserContext, length: number, mode: TextModes): string~

   处理 HTML 一些特殊符号，比如： ~a > b~ => ~a &lt; b~

   #+begin_src typescript
    const decodeRE = /&(gt|lt|amp|apos|quot);/g
    const decodeMap: Record<string, string> = {
        gt: '>',
        lt: '<',
        amp: '&',
        apos: "'",
        quot: '"'
    }
   #+end_src


测试：
#+begin_src js
const {
  baseParse
} = require(process.env.PWD + '/../../static/js/vue/compiler-core.global.js')

let ast = baseParse(`some text`)
console.log(`>>> 普通文本 "some text"`)
console.log(ast)
console.log(`>>> 带 html 语义符号的文本 "a &lt; b"`)
ast = baseParse(`a &lt; b`)
console.log(ast)
#+end_src

+RESULTS: 如结果显示 ~&lt;~, ~&gt;~ 等符号会被转成语义化符号。
#+begin_example
>>> 普通文本 "some text"
{
  type: 0,
  children: [ { type: 2, content: 'some text', loc: [Object] } ],
}
>>> 带 html 语义符号的文本 "a &lt; b"
{
  type: 0,
  children: [ { type: 2, content: 'a < b', loc: [Object] } ],
}
undefined
#+end_example
* [[https://github.com/gcclll/stb-vue-next/commit/d7dbc28809d8ecb37502a1280c1f699b97d3bc4c][d7dbc28]] add comment parser(parseComment)

[[https://github.com/gcclll/stb-vue-next/commit/d7dbc28809d8ecb37502a1280c1f699b97d3bc4c][feat(add): comment parser · gcclll/stb-vue-next@d7dbc28]]

修改 ~parseChildren()~:

~else if s[0] === '<'~ 作为开始，可能是标签、html 注释等等。

[[http://qiniu.ii6g.com/img/20201124181448.png]]

代码：
#+begin_src typescript
function parseComment(context: ParserContext): CommentNode {
  __TEST__ && assert(startsWith(context.source, '<!--'))

  const start = getCursor(context)
  let content: string

  const match = /--(\!)?>/.exec(context.source)

  if (!match) {
    // 非法注释
    content = context.source.slice(4)
    advanceBy(context, context.source.length)
    emitError(context, ErrorCodes.EOF_IN_COMMENT)
  } else {
    if (match.index <= 3) {
      // 不满足 <!-- -->
      emitError(context, ErrorCodes.ABRUPT_CLOSING_OF_EMPTY_COMMENT)
    }

    if (match[1]) {
      // 非法结束 <!-- --!>
      emitError(context, ErrorCodes.INCORRECTLY_CLOSED_COMMENT)
    }

    // 注释内容
    content = context.source.slice(4, match.index)

    // 嵌套注释
    const s = context.source.slice(0, match.index)
    let prevIndex = 1,
      nestedIndex = 0

    while ((nestedIndex = s.indexOf('<!--', prevIndex)) !== -1) {
      advanceBy(context, nestedIndex - prevIndex + 1)
      if (nestedIndex + 4 < s.length) {
        emitError(context, ErrorCodes.NESTED_COMMENT)
      }
      prevIndex = nestedIndex + 1
    }

    advanceBy(context, match.index + match[0].length - prevIndex + 1)
  }

  return {
    type: NodeTypes.COMMENT,
    content,
    loc: getSelection(context, start)
  }
}
#+end_src

1. 通过 ~/--(\!)?>/~ 匹配注释的结束
2. 如果无法匹配到，说明是非法注释，如： ~<!-- xxx ->~
3. 匹配到之后的非法情况(~match.index <= 3~)： ~<!-->~ 或 ~<!--->~
4. 捕获组(~(\!)~)也匹配到了，非法结束： ~<!-- --!>~
5. 嵌套注释也视为非法

测试：
#+begin_src js
const {
  baseParse
} = require(process.env.PWD + '/../../static/js/vue/compiler-core.global.js')

const catchError = fn => {
  try { fn() } catch (e) { console.log(e.message) }
}

let ast = baseParse(`<!-- xx -->`)
console.log(`>>> 非法注释："<!-- xxx ->"`)
catchError( () => baseParse(`<!-- xxx ->`))
console.log(`>>> 非法注释："<!--->"`)
catchError(  () => baseParse(`<!--->`))
console.log(`>>> 非法注释："<!-- xx --!>"`)
catchError(  () => baseParse(`<!-- xx --!>`))
console.log(`>>> 嵌套注释："<!-- <!-- -->"`)
catchError(  () => baseParse(`<!-- <!-- -->`))
console.log('>>> 有效注释')
console.log(ast)
#+end_src

+RESULTS:
#+begin_example
>>> 非法注释："<!-- xxx ->"
Unexpected EOF in comment.
>>> 非法注释："<!--->"
Illegal comment.
>>> 非法注释："<!-- xx --!>"
Incorrectly closed comment.
>>> 嵌套注释："<!-- <!-- -->"
Unexpected '<!--' in comment.
>>> 有效注释
{
  type: 0,
  children: [ { type: 3, content: ' xx ', loc: [Object] } ],
  // ...
}
#+end_example
* [[https://github.com/gcclll/stb-vue-next/commit/7d5f9c4910979b2439d2bc5deed4572afd56080d][7d5f9c4]] add bogus comment parser(parseBogusComment)

[[https://github.com/gcclll/stb-vue-next/commit/7d5f9c4910979b2439d2bc5deed4572afd56080d][feat(add): bogus comment parser · gcclll/stb-vue-next@7d5f9c4]]

匹配正则： ~/^<(?:[\!\?]|\/[^a-z>])/i~

[[http://qiniu.ii6g.com/img/20201124185249.png]]


1. ~<!DOCTYPE~ 注释
2. ~<![[CDATA>~ 类型


#+begin_src typescript
function parseBogusComment(context: ParserContext): CommentNode | undefined {
  // <?... or <!... or </.... 形式注释 ???
  __TEST__ && assert(/^<(?:[\!\?]|\/[^a-z>])/i.test(context.source))

  const start = getCursor(context)
  const contentStart = context.source[1] === '?' ? 1 : 2
  let content: string

  // 结束
  const closeIndex = context.source.indexOf('>')
  if (closeIndex === -1) {
    content = context.source.slice(contentStart)
    advanceBy(context, context.source.length)
  } else {
    content = context.source.slice(contentStart, closeIndex)
    advanceBy(context, closeIndex + 1)
  }

  return {
    type: NodeTypes.COMMENT,
    content,
    loc: getSelection(context, start)
  }
}
#+end_src

测试：
#+begin_src js
const {
  baseParse
} = require(process.env.PWD + '/../../static/js/vue/compiler-core.global.js')

const catchError = fn => {
  let res
  try { res = fn() } catch (e) { console.log(e.message) }
  res && console.log(res)
}

// html 中使用 <![CDATA[ 注释
catchError(() => baseParse(`<![CDATA[ xxx ]]`))
catchError(() => baseParse(`<!DOCTYPE xxx >`))
#+end_src

+RESULTS:
#+begin_example
CDATA section is allowed only in XML context.
{
  type: 0,
  children: [ { type: 3, content: 'DOCTYPE xxx ', loc: [Object] } ],
}
#+end_example
* [[https://github.com/gcclll/stb-vue-next/commit/cef8485fcd883f19d3ac3591b0e0d9610161a626][cef8485]] add more error element situations

[[https://github.com/gcclll/stb-vue-next/commit/cef8485fcd883f19d3ac3591b0e0d9610161a626][feat(add): more error element situations · gcclll/stb-vue-next@cef8485]]

更多错误标签情况，以 ~</~ 开头的情况处理。

#+begin_src js
const {
  baseParse
} = require(process.env.PWD + '/../../static/js/vue/compiler-core.global.js')

const catchError = fn => {
  let res
  try { res = fn() } catch (e) { console.log(e.message) }
  res && console.log(res)
}

catchError(() => baseParse(`</`))
catchError(() => baseParse(`</>`))
catchError(() => baseParse(`</xx>`))
catchError(() => baseParse(`<?`))
catchError(() => baseParse(`<*`))
#+end_src

+RESULTS:
: Unexpected EOF in tag.
: End tag name was expected.
: Invalid end tag.
: '<?' is allowed only in XML context.
: Illegal tag name. Use '&lt;' to print '<'.
* [[https://github.com/gcclll/stb-vue-next/commit/b8cb8251ba739655a1ddd781f2d4724c7ec4c981][b8cb825]] add interpolation parser

[[https://github.com/gcclll/stb-vue-next/commit/b8cb8251ba739655a1ddd781f2d4724c7ec4c981][feat(add): interpolation parser · gcclll/stb-vue-next@b8cb825]]

插值解析。

#+begin_src typescript
function parseInterpolation(
  context: ParserContext,
  mode: TextModes
): InterpolationNode | undefined {
  const [open, close] = context.options.delimiters
  __TEST__ && assert(startsWith(context.source, open))

  const closeIndex = context.source.indexOf(close, open.length)
  if (closeIndex === -1) {
    emitError(context, ErrorCodes.X_MISSING_INTERPOLATION_END)
    return undefined
  }

  const start = getCursor(context)
  advanceBy(context, open.length)
  const innerStart = getCursor(context)
  const innerEnd = getCursor(context)
  // 插值内容长度
  const rawContentLength = closeIndex - open.length
  const rawContent = context.source.slice(0, rawContentLength)
  // html 语义化符号替换
  const preTrimContent = parseTextData(context, rawContentLength, mode)
  // 去掉前后空格
  const content = preTrimContent.trim()
  // 去掉空格后的内容所在的索引位置
  const startOffset = preTrimContent.indexOf(content)
  if (startOffset > 0) {
    advancePositionWithMutation(innerStart, rawContent, startOffset)
  }

  const endOffset =
    rawContentLength - (preTrimContent.length - content.length - startOffset)
  advancePositionWithMutation(innerEnd, rawContent, endOffset)
  advanceBy(context, close.length)

  return {
    type: NodeTypes.INTERPOLATION,
    content: {
      type: NodeTypes.SIMPLE_EXPRESSION,
      isStatic: false,
      isConstant: false,
      content,
      loc: getSelection(context, innerStart, innerEnd)
    },
    loc: getSelection(context, start)
  }
}
#+end_src

执行操作：
1. 根据 ~{{~, ~}}~ 取出插值起始索引
2. 截取插值内容，替换 html 语义字符，且去掉前后空格
3. 组装插值结构


#+begin_src js
const {
  baseParse
} = require(process.env.PWD + '/../../static/js/vue/compiler-core.global.js')

const ast = baseParse(`{{ foo.value }}`)
console.log(ast)
console.log(`>>> 插值节点`)
console.log(ast.children[0])
#+end_src

+RESULTS:
#+begin_example
{
  type: 0,
  children: [ { type: 5, content: [Object], loc: [Object] } ],
}
>>> 插值节点
{
  type: 5,
  content: {
    type: 4,
    isStatic: false,
    isConstant: false,
    content: 'foo.value',
    loc: { start: [Object], end: [Object], source: 'foo.value' }
  },
  loc: {
    start: { column: 1, line: 1, offset: 0 },
    end: { column: 16, line: 1, offset: 15 },
    source: '{{ foo.value }}'
  }
}
undefined
#+end_example
* [[https://github.com/gcclll/stb-vue-next/commit/397da3875a944757bdc50b5ce7b53d725bae8687][397da38]] add element parser

[[https://github.com/gcclll/stb-vue-next/commit/397da3875a944757bdc50b5ce7b53d725bae8687][feat(add): parse element function · gcclll/stb-vue-next@397da38]]

解析元素标签的入口函数，实际详细解析在 ~parseTag()~ 函数中，所以这里需要结合
~parseTag~ 的实现才能测试。

代码：
#+begin_src typescript

function parseElement(
  context: ParserContext,
  ancestors: ElementNode[]
): ElementNode | undefined {
  __TEST__ && assert(/^<[a-z]/i.test(context.source))

  const wasInPre = context.inPre
  const wasInVPre = context.inVPre
  const parent = last(ancestors)
  // 解析出开始标签
  const element = {} as any // parseTag(context, TagType.Start, parent)
  const isPreBoundray = context.inPre && !wasInPre
  const isVPreBoundray = context.inVPre && !wasInVPre

  if (element.isSelfClosing || context.options.isVoidTag(elment.tag)) {
    return element
  }

  ancestors.push(element)
  const mode = context.options.getTextMode(element, parent)
  const children = parseChildren(context, mode, ancestors)
  // 要将孩子节点解析完成的 parent element pop 掉，待处理下一个 parent 的 children
  ancestors.pop()

  if (startsWithEndTagOpen(context.source, element.tag)) {
    // 结束标签
    // parseTag(context, TagType.End, parent)
  } else {
    emitError(context, ErrorCodes.X_MISSING_END_TAG, 0, element.loc.start)
    if (context.source.length === 0 && element.tag.toLowerCase() === 'script') {
      const first = children[0]
      if (first && startsWith(first.loc.source, '<!--')) {
        emitError(context, ErrorCodes.EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT)
      }
    }
  }

  element.loc = getSelection(context, element.loc.start)

  if (isPreBoundray) {
    context.inPre = false
  }

  if (isVPreBoundray) {
    context.inVPre = false
  }

  return element
}
#+end_src

源码分析：

1. 通过调用 ~parseTag()~ 解析出标签元素结构
2. 判断是不是自闭合标签(~<div/>~)，或者外部定义的空标签(不需要结束标签的，如： ~<my-tag>~
   ，为合法标签)
3. 调用 ~parseChildren()~ 递归解析该节点下子孙节点
4. 结束标签解析
5. ~<pre>~ 和 ~v-pre~ 检测
* [[https://github.com/gcclll/stb-vue-next/commit/3b96a7452634d4b09f965243b99d56566db3f0c2][3b96a74]] add tag parser

[[https://github.com/gcclll/stb-vue-next/commit/3b96a7452634d4b09f965243b99d56566db3f0c2][feat(add): tag parser · gcclll/stb-vue-next@3b96a74]]

#+begin_src typescript


function parseTag(
  context: ParserContext,
  type: TagType,
  parent: ElementNode | undefined
): ElementNode {
  // 匹配 <div> 或 </div>
  __TEST__ && assert(/^<\/?[a-z]/i.test(context.source))
  __TEST__ &&
    assert(
      type === (startsWith(context.source, '</') ? TagType.End : TagType.Start)
    )

  // 开始标签
  const start = getCursor(context)
  const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source)!
  const tag = match[1]
  const ns = context.options.getNamespace(tag, parent)

  advanceBy(context, match[0].length)
  advanceSpaces(context)

  // 保存当前状态，待会需要回过头来解析属性
  // const cursor = getCursor(context)
  // const currentSource = context.source

  // 解析属性
  let props = [] as any[] // TODO parseAttributes(context, type)

  // TODO <pre> 标签

  // TODO v-pre 指令

  // 结束标签
  let isSelfClosing = false
  if (context.source.length === 0) {
    emitError(context, ErrorCodes.EOF_IN_TAG)
  } else {
    // <div ... />
    isSelfClosing = startsWith(context.source, '/>')
    // 到这里不应该是 End 标签
    if (type === TagType.End && isSelfClosing) {
      emitError(context, ErrorCodes.END_TAG_WITH_TRAILING_SOLIDUS)
    }
    advanceBy(context, isSelfClosing ? 2 : 1)
  }

  let tagType = ElementTypes.ELEMENT

  // TODO 标签类型解析
  return {
    type: NodeTypes.ELEMENT,
    ns,
    tag,
    tagType,
    props,
    isSelfClosing,
    children: [],
    loc: getSelection(context, start),
    codegenNode: undefined
  }
}
#+end_src

1. 开始标签匹配正则： ~/^<\/?([a-z][^\t\r\n\f />]*)/i~

  [[http://qiniu.ii6g.com/img/20201124230909.png]]
2. ~<pre>~ 标签处理
3. ~v-pre~ 指令处理
4. 自闭合标签处理
5. 组装元素结构 ~NodeTypes.ELEMENT~


测试：
#+begin_src js
const {
  baseParse
} = require(process.env.PWD + '/../../static/js/vue/compiler-core.global.js')

let ast = baseParse(`<div></div>`)
console.log(`>>> 普通标签`)
console.log(ast.children[0])
ast = baseParse(`<img/>`)
console.log(`>>> 自闭合标签`)
console.log(ast.children[0])
console.log(`>>> 自定义空标签 <mydiv>`)
ast = baseParse(`<mydiv>`, {
  isVoidTag: () => `mydiv`
})
console.log(ast.children[0])
#+end_src

+RESULTS: 省略部分输出
#+begin_example
>>> 普通标签
{
  type: 1,
  ns: 0,
  tag: 'div',
  tagType: 0,
  props: [],
  isSelfClosing: false,
  children: [],
}
>>> 自闭合标签
{
  type: 1,
  ns: 0,
  tag: 'img',
  tagType: 0,
  props: [],
  isSelfClosing: true,
  children: [],
}
>>> 自定义空标签 <mydiv>
{
  type: 1,
  ns: 0,
  tag: 'mydiv',
  tagType: 0,
  props: [],
  isSelfClosing: false,
  children: [],
}
#+end_example
* [[https://github.com/gcclll/stb-vue-next/commit/bf28a36b0f7f59c186b6108e5cab118a039903e0][bf28a36]] add tag parser of tag type

[[https://github.com/gcclll/stb-vue-next/commit/bf28a36b0f7f59c186b6108e5cab118a039903e0][feat(add): parse tag for tag type · gcclll/stb-vue-next@bf28a36]]

解析出标签的标签名(~component~ ? ~template~ ? ~slot~ ? ...)。

1. ~if (options.isNativeTag && !hasVIs)~

   ~!options.isNativeTag(tag)~ 如果不是原生标签，则视为 ~COMPONENT~

2. 第二种为 ~COMPONENT~ 情况

   #+begin_src typescript
    else if (
      hasVIs ||
      isCoreComponent(tag) ||
      (options.isBuiltInComponent && options.isBuiltInComponent(tag)) ||
      /^[A-Z].test(tag)/ ||
      tag === 'component'
    )
   #+end_src

   - 有 ~v-is~ 指令
   - ~isCoreComponent()~ vue 内置标签(~Teleport~, ~Suspense~, ~KeepAlive~,
      ~BaseTransition~)
   - 选项中自定义的
   - 标签名首字母大写的也视为 ~component~
   - 标签名直接是 ~component~ 的

3. ~if (tag === 'slot')~ 插槽标签
4. ~<template>~ 标签，且带有指令

   #+begin_src typescript
    tag === 'template' &&
      props.some(p => {
        return (
          p.type === NodeTypes.DIRECTIVE && isSpecialTemplateDirective(p.name)
        )
      })
   #+end_src

   特殊的模板指令：

   #+begin_src typescript
    const isSpecialTemplateDirective = /*#__PURE__*/ makeMap(
        `if,else,else-if,for,slot`
    )
   #+end_src

这个由于需要用到属性，所以需要结合 ~parseAttributes~ 实现才能进行测试。
* 73fd01f add attribute name and value parser

[[https://github.com/gcclll/stb-vue-next/commit/73fd01f98a4ba9b2eba4fa8861f4eed91f93dad7][feat(add): attribute name and value parser · gcclll/stb-vue-next@73fd01f]]

这里新增了三个函数(代码较多，需要查看源码直接点击上面 commit 链接)

1. ~parseAttributes(context, type)~ 属性解析入口，通过 while 循环解析出所有属性
2. ~parseAttribute(context, nameSet)~ 解析单个属性，属性名用 nameSet 集合存储避
   免重复
3. ~parseAttributeValue(context)~ 解析属性值

测试：
#+begin_src js
const {
  baseParse
} = require(process.env.PWD + '/../../static/js/vue/compiler-core.global.js')

const ast = baseParse(`<div class="app" :staticPropName="bar" @press.enter="pressKey" :[dynamicPropName]="foo"></div>`)
const ele = ast.children[0]
console.log(ele)
console.log(`>>> 静态属性：class`)
console.log(ele.props[0])
console.log(`>>> 动态属性静态属性名：staticPropName`)
console.log(ele.props[1])
console.log(`>>> 带修饰符的属性：press.enter`)
console.log(ele.props[2])
console.log(`>>> 动态属性名：dynamicPropName`)
console.log(ele.props[3])
#+end_src

+RESULTS: 元素结构
#+begin_example
{
  type: 1,
  ns: 0,
  tag: 'div',
  tagType: 1,
  props: [...], // 如下
  isSelfClosing: false,
  children: [],
}
#+end_example

+RESULTS: 属性列表， 省略 loc 位置数据
#+begin_example
>>> 静态属性：class
{
  type: 6,
  name: 'class',
  value: {
    type: 2,
    content: 'app',
  }
}
>>> 动态属性静态属性名：staticPropName
{
  type: 7,
  name: 'bind',
  exp: {
    type: 4,
    content: 'bar',
    isStatic: false,
    isConstant: false,
  },
  arg: {
    type: 4,
    content: 'staticPropName',
    isStatic: true,
    isConstant: true,
  },
  modifiers: [],
}
>>> 带修饰符的属性：press.enter
{
  type: 7,
  name: 'on',
  exp: {
    type: 4,
    content: 'pressKey',
    isStatic: false,
    isConstant: false,
  },
  arg: {
    type: 4,
    content: 'press',
    isStatic: true,
    isConstant: true,
  },
  modifiers: [ 'enter' ],
}
>>> 动态属性名：dynamicPropName
{
  type: 7,
  name: 'bind',
  exp: {
    type: 4,
    content: 'foo',
    isStatic: false,
    isConstant: false,
  },
  arg: {
    type: 4,
    content: 'dynamicPropName',
    isStatic: false,
    isConstant: false,
  },
  modifiers: [],
}
#+end_example
* e32401e add combine whitespace nodes

[[https://github.com/gcclll/stb-vue-next/commit/e32401ec78bcad14bd68ade90f556e650635e10a][feat(add): combine whitespace node · gcclll/stb-vue-next@e32401e]]

合并删除空行或空字符串节点。

#+begin_src js
const {
  baseParse
} = require(process.env.PWD + '/../../static/js/vue/compiler-core.global.js')

const ast = baseParse(`
<div>
some text
other text
</div>`)
console.log(ast.children[0].children[0])
#+end_src

*+RESULTS*: 正确结果
#+begin_example
{
  type: 2,
  content: ' some text other text ',
  loc: {
    start: { column: 6, line: 2, offset: 6 },
    end: { column: 1, line: 5, offset: 28 },
    source: '\nsome text\nother text\n'
  }
}
#+end_example

*+RESULTS*: 'sometextothertext' 空格都被删了？
[[https://github.com/gcclll/stb-vue-next/commit/bb315097139965f5542715fdd37125827db19c02][fix: all whitespce removed · gcclll/stb-vue-next@bb31509]]
#+begin_example
{
  type: 1,
  ns: 0,
  tag: 'div',
  tagType: 1,
  props: [],
  isSelfClosing: false,
  children: [ { type: 2, content: 'sometextothertext', loc: [Object] } ],
  loc: {
    start: { column: 1, line: 2, offset: 1 },
    end: { column: 7, line: 5, offset: 34 },
    source: '<div>\nsome text\nother text\n</div>'
  },
  codegenNode: undefined
}
undefined
#+end_example

*+RESULTS*: ~children = []~ ? [[https://github.com/gcclll/stb-vue-next/commit/66936f350e2d4e771341835b3c81054a42e83fad][fix: no children · gcclll/stb-vue-next@66936f3]]
#+begin_example
{
  type: 1,
  ns: 0,
  tag: 'div',
  tagType: 1,
  props: [],
  isSelfClosing: false,
  children: [],
  loc: {
    start: { column: 1, line: 2, offset: 1 },
    end: { column: 7, line: 5, offset: 34 },
    source: '<div>\nsome text\nother text\n</div>'
  },
  codegenNode: undefined
}
undefined
#+end_example


* 用例测试

~<f12>~ 打开控制台有惊喜哦╰(*°▽°*)╯ 👀👀👀👀👀👀👀👀。

下面章节所有测试都是根据官方测试用例进行的：[[https://github.com/gcclll/stb-vue-next/blob/main/packages/compiler-core/__tests__/parse.spec.ts][parse.spec.ts]]

#+begin_export html
<script>
try {
let i = 0, j = 0
const { baseParse } = VueCompilerCore
const l1 = x => console.log(`%c >>> ${++i} ${x}`, 'background: #222; color: #bada55')
const l2 = x => console.log(`%c > ${i}.${j++} ${x}`, 'background: #222; color: #bada55')
const log = (args) => console.log.apply(console, args)
const parse = (content, option = {}) => log(baseParse(content, {
  onError: (e) => console.warn(e.message),
  ...option
}).children)

l1('Text, 文本测试')
l2(`无效的结束标签("some text</div>")。`)
parse(`some text</div>`)

l2(`插值解析("some {{ foo + bar }} text")`)
parse(`some {{ foo + bar }} text`)

l2(`表达式包含 < 或 > 符号的差值("some {{ a<b && c>d }} text")`)
log(['插值内的内容都会以 {{ 开始 }} 结束直接截取作为 content，所以这里面的 < 或 > 都是合法的存在'])
parse(`some {{ a<b && c>d }} text`)

l2(`标签 + 插值混合("some <span>{{ foo < bar + foo }} text</span>")`)
parse(`some <span>{{ foo < bar + foo }} text</span>`)

l2(`单个 < 符号不会分割节点("a < b")`)
parse(`a < b`)

l2(`单个 {{ 符号不会分割节点("a {{ b")`)
parse(`a {{ b`)

j = 0
l1('Interpolation, 插值测试')
l2(`simple interpolation("{{message}}")`)
parse(`{{message}}`)

l2(`{{ a<b }}`)
parse(`{{ a <  b }}`)

l2(`{{ a<b }}{{ c>d }}`)
parse(`{{ a<b }}{{ c>d }}`)

l2(`插值内部允许存在一些符合法标签('<div>{{ "</div>" }}</div>')`)
parse(`<div>{{ "</div>" }}</div>`)

l2(`可以自定义插值分隔符，如："{" 和 "}"`)
parse(`<p>{msg}</p>`, {
    delimiters: ['{', '}']
})

j = 0
l1(`Comment, 注释`)
l2(`空注释("<!---->")`)
parse(`<!---->`)

l2(`简单注释("<!--abc-->")`)
parse(`<!--abc-->`)

l2(`两个注释("<!--abc--><!--def-->")`)
parse(`<!--abc--><!--def-->`)

l2(`生成模式下 <pre> 中的注释应该被删除("<pre><p/><!-- foo --><p/></pre>")`)
parse(`<pre><p/><!-- foo --><p/></pre>`)

j = 0
l1(`Element, 普通标签`)
l2(`simple div("<div>hello</div>")`)
parse(`<div>hello</div>`)

l2(`empty div("<div></div>")`)
parse(`<div></div>`)

l2(`自闭合标签("<div/>after")`)
parse(`<div/>after`)

l2(`空标签("<img>after")`)
parse(`<img>after`, {
    isVoidTag: tag => tag === 'img'
})

l2(`带指令的 <template>("<template v-if="ok"></template>")`)
parse(`<template v-if="ok"></template>`)

l2(`不带指令的 <template>("<template></template>")`)
parse(`<template></template>`)

l2(`原生标签("<div></div><comp></comp><Comp></Comp>")`)
parse(`<div></div><comp></comp><Comp></Comp>`, {
  isNativeTag: tag => tag === 'div'
})

l2(`v-is with "isNativeTag"("<div></div><div v-is="'foo'"></div><Comp></Comp>")`)
parse(`<div></div><div v-is="'foo'"></div><Comp></Comp>`, {
  isNativeTag: tag => tag === 'div'
})

l2(`v-is without "isNativeTag"("<div></div><div v-is="'foo'"></div><Comp></Comp>")`)
parse(`<div></div><div v-is="'foo'"></div><Comp></Comp>`)

l2(`自定义元素("<div></div><comp></comp>")`)
log([`自定义元素的类型为 0,ELEMENT`])
parse(`<div></div><comp></comp>`, {
  isNativeTag: tag => tag === 'div',
  isCustomElement: tag => tag === 'comp'
})

l2(`内置组件("<div></div><comp></comp>")`)
parse(`<div></div><comp></comp>`, {
  isBuiltInComponent: tag => (tag === 'comp' ? Symbol() : void 0)
})

l2(`插槽元素("<slot></slot><Comp></Comp>")`)
parse(`<slot></slot><Comp></Comp>`)

l2(`没有值的属性("<div id></div>")`)
parse(`<div id></div>`)

l2(`空值属性，双引号("<div id=""></div>")`)
parse(`<div id=""></div>`)

l2(`空值属性，单引号("<div id=''></div>")`)
parse(`<div id=''></div>`)

l2(`有值属性，双引号("<div id=">\'"></div>")`)
parse(`<div id=">\'"></div>`)

l2(`有值属性，单引号("<div id='>\"'></div>")`)
parse(`<div id='>\"'></div>`)

l2(`有值属性，没有引号("<div id=a/></div>")`)
log([`没有引号的情况，属性值会解析到 ">" 符号结束`])
parse(`<div id=a/></div>`)

l2(`多个属性("<div id=a class="c" inert style=\'\'></div>")`)
parse(`<div id=a class="c" inert style=\'\'></div>`)

l2(`无值指令("<div v-if/>")`)
parse(`<div v-if/>`)

l2(`有值指令("<div v-if="a"/>")`)
log([`有值指令，值会解析到属性表达式上 prop.exp = {...}`])
parse(`<div v-if="a"/>`)

l2(`有参数指令("<div v-on:click/>")`)
log([`参数会被解析到 prop.arg 上，isStatic = isConstant = true`])
parse(`<div v-on:click/>`)

l2(`有动态参数指令("<div v-on:[event]/>")`)
log([`参数会被解析到 prop.arg 上， isStatic = isConstant = false`])
parse(`<div v-on:[event]/>`)

l2(`带修饰符的指令("<div v-on.enter/>")`)
log([`修饰符会被解析到 prop.modifiers = [ 'enter' ] 中`])
parse(`<div v-on.enter/>`)

l2(`两个修饰符的指令("<div v-on.enter.exact/>")`)
log([`修饰符会被解析到 prop.modifiers = [ 'enter', 'exact' ] 中`])
parse(`<div v-on.enter.exact/>`)

l2(`带参数和修饰符的指令("<div v-on:click.enter.exact/>")`)
parse(`<div v-on:click.enter.exact/>`)

l2(`带动态参数和修饰符的指令("<div v-on:[a.b].camel/>")`)
parse(`<div v-on:[a.b].camel/>`)

l2(`v-bind 缩写 ":"("<div :a=b />")`)
parse(`<div :a=b />`)

l2(`v-bind 缩写，带修饰符("<div :a.sync=b />")`)
parse(`<div :a.sync=b />`)

l2(`v-on 缩写("<div @a=b />")`)
parse(`<div @a=b />`)

l2(`v-on 缩写，带修饰符("<div @a.enter=b />")`)
parse(`<div @a.enter=b />`)

l2(`v-slot 缩写("<Comp #a="{ b }" />")`)
parse(`<Comp #a="{ b }" />`)

l2(`v-slot 包含点语法的("<Comp v-slot:foo.bar="{ a }" />")`)
parse(`<Comp v-slot:foo.bar="{ a }" />`)

l2(`v-pre 指令`)
log([
  `<div v-pre :id="foo"><Comp/>{{ bar }}</div>\n` +
  `<div :id="foo"><Comp/>{{ bar }}</div>`
])
parse(
  `<div v-pre :id="foo"><Comp/>{{ bar }}</div>\n` +
  `<div :id="foo"><Comp/>{{ bar }}</div>`
)

l2(`结束标签大小写不敏感("<div>hello</DIV>after")`)
parse(`<div>hello</DIV>after`)

j = 0
l1(`其他情况`)
l2(`自闭合标签("<div :class="{ some: condition }" />")`)
parse(`<div :class="{ some: condition }" />`)

l2(`多个自闭合标签`)
log([
  `<div :class="{ some: condition }" />\n` +
  `<p v-bind:style="{ color: 'red' }"/>`
])
parse(
  `<div :class="{ some: condition }" />\n` +
  `<p v-bind:style="{ color: 'red' }"/>`
)

l2(`复合类型标签组合`)
log([
`<div :class="{ some: condition }">\n` +
`  <p v-bind:style="{ color: 'red' }"/>\n` +
`  <!-- a comment with <html> inside it -->\n` +
`</div>`
])
parse(
 `<div :class="{ some: condition }">\n` +
 `  <p v-bind:style="{ color: 'red' }"/>\n` +
 `  <!-- a comment with <html> inside it -->\n` +
 `</div>`
)

l2(`无效的复合类型标签组合("<div>\n<span>\n</div>\n</span>")`)
parse(`<div>\n<span>\n</div>\n</span>`)

l2(`正确的位置信息`)
log([
`
foo
 is {{ bar }} but {{ baz }}`
])

parse(`
foo
 is {{ bar }} but {{ baz }}`
)

j = 0
l1("HTML Entities 解码")
l2(`使用默认映射关系("&gt;&lt;&amp;&apos;&quot;&foo;")`)
parse(`&gt;&lt;&amp;&apos;&quot;&foo;`)

l2(`使用自定义映射关系("&amp;&cups;")`)
parse(`&amp;&cups;`, {
  decodeEntities: text => text.replace('&cups;', '\u222A\uFE00')
})

j = 0
l1("空格管理")
l2(`在标签内的空格应该删除("<div>   <span/>    </div>")`)
parse(`<div>   <span/>    </div>`)

l2(`标签之间的空格和换行符应该删除("<div/> \n <div/> \n <div/>")`)
parse(`<div/> \n <div/> \n <div/>`)

l2(`与注释相邻的空格应该删除("<div/> \n <!--foo--> <div/>")`)
parse(`<div/> \n <!--foo--> <div/>`)

l2(`注释与元素之间的空格应该删除("<div/> \n <!--foo--> \n <div/>")`)
parse(`<div/> \n <!--foo--> \n <div/>`)

l2(`插值之间的注释不应该删除("{{ foo }} \n {{ bar }}")`)
parse(`{{ foo }} \n {{ bar }}`)

l2(`元素之间的空格不应该删除("<div/> <div/> <div/>")`)
parse(`<div/> <div/> <div/>`)

l2(`文本之间的空格应该合并成一个("   foo  \n    bar     baz     ")`)
parse('   foo  \n    bar     baz     ')

l2(`<pre> 标签中的首行空格应该删除("<pre>\n  foo  bar  </pre>")`)
parse(`<pre>\n  foo  bar  </pre>`)

l2(`<pre> 在子元素后面的换行符不该删除("<pre><span></span>\n  foo  bar  </pre>")`)
parse(`<pre><span></span>\n  foo  bar  </pre>`)

j = 0
const err = ( content, info ) => (l2(info ? `${info} ("${content}")` : content), parse(content))
l1(`Errors, 错误`)
err(`<template><!--></template>`)
err(`<template><!---></template>`)
err(`<template><!----></template>`)
err(`<template><![CDATA[cdata]]></template>`)
err(`<template><svg><![CDATA[cdata]]></svg></template>`, "不能在 HTML 中使用 CDATA")
err(`<template><div id="" id=""></div></template>`, "重复属性")
err(`<template><div></div id=""></template>`, "结束标签上不能有属性")
err(`<template><div></div/></template>`, "结束标签最后多了个斜杠'/'")
err(`<template><`, "非法结束 1")
err(`<template></`, '非法结束 2')
err(`<template><svg><![CDATA[cdata`, "CDATA 非法结束 1")
err(`<template><svg><![CDATA[`, "CDATA 非法结束 2")
err(`<template><!--comment`, "非法注释 1")
err(`<template><!--`, "非法注释 2")
err(`<template><!`, "非法注释 3")
err(`<template><!-`, "非法注释 4")
err(`<template><!abc`, "非法注释 5")
err(`<script><!--console.log('hello')`, "<script> 标签中不能使用 html 注释")
err(`<script>console.log('hello')`, "<script> 缺少结束标签")
err(`<template><div`, "非法标签 1")
err(`<template><div `, "非法标签 2")
err(`<template><div id`, "非法标签 3")
err(`<template><div id `, "非法标签 4")
err(`<template><div id =`, "非法标签 5")
err(`<template><div id='abc`, "非法标签 6")
err(`<template><div id="abc`, "非法标签 7")
err(`<template><div id='abc'`, "非法标签 8")
err(`<template><div id="abc"`, "非法标签 9")
err(`<template><div id=abc`, "非法标签 10")
err(`<template><div id='abc'/`, "非法标签 11")
err(`<template><div id="abc"/`, "非法标签 12")
err(`<template><div id=abc /`, "非法标签 13")
err(`<div></div`, "非法标签 14")
err(`<template><!--comment--!></template>`, "错误注释结束")
err(`<template><!></template>`, "错误注释开始 1")
err(`<template><!-></template>`, "错误注释开始 2")
err(`<template><!ELEMENT br EMPTY></template>`, "错误注释开始 3")
err(`<!DOCTYPE html>`, "忽略 doctype")
err(`<template>a < b</template>`, "标签名第一个字符非法 1")
err(`<template><�></template>`, "标签名第一个字符非法 2")
err(`<template>a </ b</template>`, "标签名第一个字符非法 3")
err(`<template></�></template>`, "标签名第一个字符非法 4")
err(`<template>{{a < b}}</template>`, "插值里面 < 可以单独使用")
err(`<template><div id=></div></template>`, "无效的属性名 1")
err(`<template><div id= ></div></template>`, "无效的属性名 2")
err(`<template><div id= /></div></template>`, "无效的属性名 3")
err(`<template></></template>`, "缺少结束标签")
err(`<template><div id="foo"class="bar"></div></template>`, "属性之间必须要有空格")
err(`<template><div id="foo"\r\nclass="bar"></div></template>`, "但是可以有 \r\n 换行符")
err(`<template><!--a<!--b--></template>`, "嵌套注释 1")
err(`<template><!--a<!--b<!--c--></template>`, "嵌套注释 2")
err(`<template><!--a<!--b<!----></template>`, "嵌套注释 3")
err(`<template><!--a<!--></template>`, "非法注释")
err(`<template><!--a<!--`, "非法注释结束")
err(`<template><div a\"bc=''></div></template>`, "属性名中包含非法字符(\") 1")
err(`<template><div a'bc=''></div></template>`, "属性名中包含非法字符(') 2")
err(`<template><div a<bc=''></div></template>`, "属性名中包含非法字符(<)")
err(`<template><div foo=bar"></div></template>`, "没引号属性中的非法字符(\")")
err(`<template><div foo=bar'></div></template>`, "没引号属性中的非法字符(\')")
err(`<template><div foo=bar<div></div></template>`, "没引号属性中的非法字符(<)")
err(`<template><div foo=bar=baz></div></template>`, "没引号属性中的非法字符(=)")
err(`<template><div foo=bar\`></div></template>`, "没引号属性中的非法字符(`)")
err(`<template><div =foo=bar></div></template>`, "属性名中的非法字符(=)")
err(`<template><?xml?></template>`)
err(`<template><div a/b></div></template>`)
err(`<template></div></template>`, "无效结束标签")
err(`<template></div></div></template>`, "无效结束标签")
err(`<template>{{'</div>'}}</template>`, "插值中有效")
err(`<textarea></div></textarea>`, "多行文本中有效")
err(`<svg><![CDATA[</div>]]></svg>`, "svg CDATA 中有效")
err(`<svg><!--</div>--></svg>`, "注释中有效")
err(`<template><div></template>`, "没有结束标签")
err(`<template><div>`, "没有结束标签")
err(`{{ foo`, "非法插值")
err(`{{`, "非法插值")
err(`{{}}`, "空插值")
err(`<div v-foo:[sef fsef] />`, "无效指令参数")

} catch (e) {
    console.log(e.message)
    console.log('您的浏览器可能不支持 es6+ 新语法，请使用 chrome 浏览。')
}


</script>

#+end_export

#+begin_src js
const {
  baseParse
} = require(process.env.PWD + '/../../static/js/vue/compiler-core.global.js')

const _ = x => console.log(`>>> ${x}`)
const __ = x => console.log(x)
const parse = content => baseParse(content, {
  onError: (e) => console.log(e.message)
})

__(parse(`some text`).children[0])
#+end_src

更多测试内容和输出(由于篇幅问题)请查看 ~<F12>~ 打开控制台查看。
+RESULTS:
#+begin_example
{
  type: 2,
  content: 'some text',
  loc: {
    start: { column: 1, line: 1, offset: 0 },
    end: { column: 10, line: 1, offset: 9 },
    source: 'some text'
  }
}
undefined
#+end_example
