#+TITLE: React DOM - Events 事件机制
#+DATE: <2021-10-12 11:38:19>
#+EMAIL: Lee ZhiCheng<gccll.love@gmail.com>
#+TAGS[]: react, events
#+CATEGORIES[]: react
#+LANGUAGE: zh-cn
#+STARTUP: indent

#+begin_export html
<link href="https://fonts.goo~gleapis.com/cs~s2?family=ZCOOL+XiaoWei&display=swap" rel="stylesheet">
<kbd>
<font color="blue" size="3" style="font-family: 'ZCOOL XiaoWei', serif;">
诗号：半神半圣亦半仙，全儒全道是全贤，脑中真书藏万卷，掌握文武半边天。
</font>
</kbd><br><br>
<img  src="/img/bdx/shz-001.jpg"/>
<script src="/js/utils.js"></script>
#+end_export

#+begin_quote
本文单独将 [[https://github.com/facebook/react/tree/main/packages/react-dom/src/events/][react-dom/src/events/]] 中事件相关的代码拎出来进行分析。
#+end_quote

* events 目录
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: events
:END:

DIR: [[https://github.com/facebook/react/tree/main/packages/react-dom/src/events][react-dom/src/events]]

#+begin_example
3:31] C:130
$ tree ./events -I "__tests__"      ~/github/react/react/packages/react-dom/src
./events
├── DOMEventNames.js
├── DOMEventProperties.js
├── DOMPluginEventSystem.js
├── EventListener.js
├── EventRegistry.js
├── EventSystemFlags.js
├── FallbackCompositionState.js
├── PluginModuleType.js
├── ReactDOMControlledComponent.js
├── ReactDOMEventListener.js
├── ReactDOMEventReplaying.js
├── ReactDOMUpdateBatching.js
├── ReactSyntheticEventType.js
├── SyntheticEvent.js
├── TopLevelEventTypes.js
├── checkPassiveEvents.js
├── forks
│   └── EventListener-www.js
├── getEventCharCode.js
├── getEventTarget.js
├── getListener.js
├── getVendorPrefixedEventName.js
├── isEventSupported.js
├── isTextInputElement.js
└── plugins
    ├── BeforeInputEventPlugin.js
    ├── ChangeEventPlugin.js
    ├── EnterLeaveEventPlugin.js
    ├── SelectEventPlugin.js
    └── SimpleEventPlugin.js

2 directories, 28 files
#+end_example

[[/js/react/react-events.svg]]

* plugins(事件插件)
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: events-plugins
:END:

** SimpleEventPlugin.js
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: SimpleEventPlugin
:END:

导出内容：

#+begin_src js
export {
  registerSimpleEvents as registerEvents,
  extractEvents
};
#+end_src

函数：
#+begin_src typescript
function extractEvents(
  dispatchQueue: DispatchQueue,
  domEventName: DOMEventName,
  targetInst: null | Fiber,
  nativeEvent: AnyNativeEvent,
  nativeEventTarget: null | EventTarget,
  eventSystemFlags: EventSystemFlags,
  targetContainer: EventTarget,
): void
#+end_src


** EnterLeveEventPlugin.js
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: EnterLeveEventPlugin
:END:

** ChangeEventPlugin.js
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: ChangeEventPlugin
:END:

** SelectEventPlugin.js
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: SelectEventPlugin
:END:

** BeforeInputEventPlugin.js
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: BeforeInputEventPlugin
:END:

* DOMPluginEventSystem.js
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: DOMPluginEventSystem
:END:

该文件开发会执行如下，注册各种事件，这些都是[[#events-plugins][做什么的]]？

#+begin_src js
SimpleEventPlugin.registerEvents();
EnterLeaveEventPlugin.registerEvents();
ChangeEventPlugin.registerEvents();
SelectEventPlugin.registerEvents();
BeforeInputEventPlugin.registerEvents();
#+end_src

* 类型系统
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: types
:END:

** DispatchQueue
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: DispatchQueue
:END:

~export type DispatchQueue = Array<DispatchEntry>;~

** DispatchEntry
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: DispatchEntry
:END:


#+begin_src typescript
type DispatchEntry = {
  event: ReactSyntheticEvent,
  listeners: Array<DispatchListener>,
};
#+end_src

** ReactSyntheticEvent
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: ReactSyntheticEvent
:END:

#+begin_src typescript
export type DispatchConfig = {
  dependencies?: Array<DOMEventName>,
  phasedRegistrationNames: {|
    bubbled: null | string,
    captured: null | string,
  |},
  registrationName?: string,
};

type BaseSyntheticEvent = {
  isPersistent: () => boolean,
  isPropagationStopped: () => boolean,
  _dispatchInstances?: null | Array<Fiber | null> | Fiber,
  _dispatchListeners?: null | Array<Function> | Function,
  _targetInst: Fiber,
  nativeEvent: Event,
  target?: mixed,
  relatedTarget?: mixed,
  type: string,
  currentTarget: null | EventTarget,
};

export type KnownReactSyntheticEvent = BaseSyntheticEvent & {
  _reactName: string,
};
export type UnknownReactSyntheticEvent = BaseSyntheticEvent & {
  _reactName: null,
};

export type ReactSyntheticEvent =
  | KnownReactSyntheticEvent
  | UnknownReactSyntheticEvent;

#+end_src
** DispatchListener
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: DispatchListener
:END:

#+begin_src typescript
type DispatchListener = {
  instance: null | Fiber,
  listener: Function,
  currentTarget: EventTarget,
};
#+end_src

** Fiber
:PROPERTIES:
:COLUMNS:  %CUSTOM_ID[(Custom Id)]
:CUSTOM_ID: Fiber
:END:

#+begin_src typescript
// A Fiber is work on a Component that needs to be done or was done. There can
// be more than one per component.
export type Fiber = {
  // These first fields are conceptually members of an Instance. This used to
  // be split into a separate type and intersected with the other Fiber fields,
  // but until Flow fixes its intersection bugs, we've merged them into a
  // single type.

  // An Instance is shared between all versions of a component. We can easily
  // break this out into a separate object to avoid copying so much to the
  // alternate versions of the tree. We put this on a single object for now to
  // minimize the number of objects created during the initial render.

  // Tag identifying the type of fiber.
  tag: WorkTag,

  // Unique identifier of this child.
  key: null | string,

  // The value of element.type which is used to preserve the identity during
  // reconciliation of this child.
  elementType: any,

  // The resolved function/class/ associated with this fiber.
  type: any,

  // The local state associated with this fiber.
  stateNode: any,

  // Conceptual aliases
  // parent : Instance -> return The parent happens to be the same as the
  // return fiber since we've merged the fiber and instance.

  // Remaining fields belong to Fiber

  // The Fiber to return to after finishing processing this one.
  // This is effectively the parent, but there can be multiple parents (two)
  // so this is only the parent of the thing we're currently processing.
  // It is conceptually the same as the return address of a stack frame.
  return: Fiber | null,

  // Singly Linked List Tree Structure.
  child: Fiber | null,
  sibling: Fiber | null,
  index: number,

  // The ref last used to attach this node.
  // I'll avoid adding an owner field for prod and model that as functions.
  ref:
    | null
    | (((handle: mixed) => void) & {_stringRef: ?string, ...})
    | RefObject,

  // Input is the data coming into process this fiber. Arguments. Props.
  pendingProps: any, // This type will be more specific once we overload the tag.
  memoizedProps: any, // The props used to create the output.

  // A queue of state updates and callbacks.
  updateQueue: mixed,

  // The state used to create the output
  memoizedState: any,

  // Dependencies (contexts, events) for this fiber, if it has any
  dependencies: Dependencies | null,

  // Bitfield that describes properties about the fiber and its subtree. E.g.
  // the ConcurrentMode flag indicates whether the subtree should be async-by-
  // default. When a fiber is created, it inherits the mode of its
  // parent. Additional flags can be set at creation time, but after that the
  // value should remain unchanged throughout the fiber's lifetime, particularly
  // before its child fibers are created.
  mode: TypeOfMode,

  // Effect
  flags: Flags,
  subtreeFlags: Flags,
  deletions: Array<Fiber> | null,

  // Singly linked list fast path to the next fiber with side-effects.
  nextEffect: Fiber | null,

  // The first and last fiber with side-effect within this subtree. This allows
  // us to reuse a slice of the linked list when we reuse the work done within
  // this fiber.
  firstEffect: Fiber | null,
  lastEffect: Fiber | null,

  lanes: Lanes,
  childLanes: Lanes,

  // This is a pooled version of a Fiber. Every fiber that gets updated will
  // eventually have a pair. There are cases when we can clean up pairs to save
  // memory if we need to.
  alternate: Fiber | null,

  // Time spent rendering this Fiber and its descendants for the current update.
  // This tells us how well the tree makes use of sCU for memoization.
  // It is reset to 0 each time we render and only updated when we don't bailout.
  // This field is only set when the enableProfilerTimer flag is enabled.
  actualDuration?: number,

  // If the Fiber is currently active in the "render" phase,
  // This marks the time at which the work began.
  // This field is only set when the enableProfilerTimer flag is enabled.
  actualStartTime?: number,

  // Duration of the most recent render time for this Fiber.
  // This value is not updated when we bailout for memoization purposes.
  // This field is only set when the enableProfilerTimer flag is enabled.
  selfBaseDuration?: number,

  // Sum of base times for all descendants of this Fiber.
  // This value bubbles up during the "complete" phase.
  // This field is only set when the enableProfilerTimer flag is enabled.
  treeBaseDuration?: number,

  // Conceptual aliases
  // workInProgress : Fiber ->  alternate The alternate used for reuse happens
  // to be the same as work in progress.
  // __DEV__ only

  _debugSource?: Source | null,
  _debugOwner?: Fiber | null,
  _debugIsCurrentlyTiming?: boolean,
  _debugNeedsRemount?: boolean,

  // Used to verify that the order of hooks does not change between renders.
  _debugHookTypes?: Array<HookType> | null,
};
#+end_src
