#+title: Doom Emacs Configuration
#+subtitle: The Methods, Management, and Menagerie of Madness
#+author: Zhicheng Lee
#+date: {{{modification-time(%Y-%m-%d %H:%M, t)}}} ;{{{timezone}}}, {{{git-rev}}}
#+macro: timezone (eval (substring (shell-command-to-string "date +%Z") 0 -1))
#+macro: git-rev (eval (format "@@html:<a href=\"https://github.com/gcclll/.doom.d/commit/%1$s\" style=\"text-decoration: none\"><code style=\"padding: 0; color: var(--text-light); font-size: inherit; opacity: 0.7\">%1$s</code></a>@@@@latex:\\href{https://github.com/gcclll/.doom.d/commit/%1$s}{%1$s}@@" (substring (shell-command-to-string "git rev-parse --short HEAD") 0 -1)))
#+startup: fold
#+property: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+property: header-args:shell :tangle "setup.sh"
#+property: header-args :tangle no :results silent
#+html_head: <link rel='shortcut icon' type='image/png' href='https://www.gnu.org/software/emacs/favicon.png'>

#+begin_quote
Áî® config.org Êñá‰ª∂Êù•Áª¥Êä§ doom emacs ÈÖçÁΩÆ„ÄÇ
#+end_quote

#+begin_export html
<a href="https://github.com/gcclll/.doom.d/"
   style="font-family: 'Open Sans'; background-image: none; color: inherit;
   text-decoration: none; position: relative; top: clamp(-26px, calc(1280px - 100vw), 0px); opacity: 0.7;">
  <img src="https://upload.wikimedia.org/wikipedia/commons/9/91/Octicons-mark-github.svg"
       class="invertible" alt="GitHub Octicon"
       style="height: 1em; position: relative; top: 0.1em;">
  View on GitHub</a>
#+end_export
#+begin_export latex
\newpage % because the contents are multi-page, this looks better
#+end_export

#+begin_quote
‰ªñ‰∫∫ÈÖçÁΩÆÂàóË°®Ôºö
#+end_quote

| name&link                                                        | brief       |
|------------------------------------------------------------------+-------------|
| [[https://github.com/zzamboni/dot-doom/blob/master/doom.org][dot-doom/doom.org at master ¬∑ zzamboni/dot-doom]]                  | -           |
| [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs configuration]]                                 | -           |
| [[https://github.com/daedreth/UncleDavesEmacs#user-content-ido-and-why-i-started-using-helm][daedreth/UncleDavesEmacs: My personal ~/.emacs.d]]                 | -           |
| [[https://github.com/PythonNut/quark-emacs][PythonNut/quark-emacs: An incredible wonderland of code]]          | -           |
| [[https://www.masteringemacs.org/][Mastering Emacs]]                                                  | -           |
| [[https://tecosaur.github.io/emacs-config/config.html][Doom Emacs Configuration]]                                         | -           |
| [[https://github.com/KaratasFurkan/.emacs.d][GitHub - KaratasFurkan/.emacs.d: My literate Emacs configuration]] | -           |
| [[https://github.com/eggcaker/.doom.d][eggcaker/.doom.d: My private doom-emacs configurations]]           | rime + pyim |
| [[https://www.gtrun.org/custom/config.html#org57b461c]]              |             |


* Êõ¥Êñ∞Êó•Âøó
[2021-05-30]

1. add scrollkeeper ÂÆö‰ΩçË°åÊó∂Èó™ÁÉÅ(~M-v,M-f~)
2. add cacltext Êï∞Â≠¶ËÆ°ÁÆó
3. add ~gcl/async-shell-command-silently~

[2021-07-02]
1. ÂçáÁ∫ß emacs27 -> emacs28 native
* Ëá™ÂÆö‰πâÂáΩÊï∞
:PROPERTIES:
:header-args:emacs-lisp: :tangle "config.el" :comments no
:END:

#+begin_src emacs-lisp :comments no
;;;###autoload
(defun gcl/use-eslint-from-node-modules ()
    "Set local eslint if available."
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))

;;;###autoload
(defun gcl/goto-match-paren (arg)
  "Go to the matching if on (){}[], similar to vi style of % ."
  (interactive "p")
  (cond ((looking-at "[\[\(\{]") (evil-jump-item))
        ((looking-back "[\]\)\}]" 1) (evil-jump-item))
        ((looking-at "[\]\)\}]") (forward-char) (evil-jump-item))
        ((looking-back "[\[\(\{]" 1) (backward-char) (evil-jump-item))
        (t nil)))

;;;###autoload
(defun gcl/string-inflection-cycle-auto ()
  "switching by major-mode"
  (interactive)
  (cond
   ;; for emacs-lisp-mode
   ((eq major-mode 'emacs-lisp-mode)
    (string-inflection-all-cycle))
   ;; for python
   ((eq major-mode 'python-mode)
    (string-inflection-python-style-cycle))
   ;; for java
   ((eq major-mode 'java-mode)
    (string-inflection-java-style-cycle))
   (t
    ;; default
    (string-inflection-all-cycle))))

;; Current time and date
(defvar current-date-time-format "%a %b %d %H:%M:%S %Z %Y"
  "Format of date to insert with `insert-current-date-time' func
See help of `format-time-string' for possible replacements")

(defvar current-time-format "%H:%M"
  "Format of date to insert with `insert-current-time' func.
Note the weekly scope of the command's precision.")

(defun insert-current-date-time ()
  "insert the current date and time into current buffer.
Uses `current-date-time-format' for the formatting the date/time."
  (interactive)
  (insert (format-time-string current-date-time-format (current-time)))
  )

(defun insert-current-time ()
  "insert the current time (1-week scope) into the current buffer."
  (interactive)
  (insert (format-time-string current-time-format (current-time)))
  )

(defun my/capitalize-first-char (&optional string)
  "Capitalize only the first character of the input STRING."
  (when (and string (> (length string) 0))
    (let ((first-char (substring string nil 1))
          (rest-str   (substring string 1)))
      (concat (capitalize first-char) rest-str))))
(defun my/lowcase-first-char (&optional string)
  "Capitalize only the first character of the input STRING."
  (when (and string (> (length string) 0))
    (let ((first-char (substring string nil 1))
          (rest-str   (substring string 1)))
      (concat first-char rest-str))))

(defun gcl/async-shell-command-silently (command)
  "async shell command silently."
  (interactive)
  (let
      ((display-buffer-alist
        (list
         (cons
          "\\*Async Shell Command\\*.*"
          (cons #'display-buffer-no-window nil)))))
    (async-shell-command
     command)))
#+end_src
* Ê®°Âùó(init.el)
:PROPERTIES:
:header-args:emacs-lisp: :tangle "init.el" :comments no
:END:


‰ΩøÁî®Âà∞ÁöÑÂåÖÔºö

#+name: init.el
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments none
;;; init.el -*- lexical-binding: t; -*-

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy               ; a search engine for love and life
        +icons
        +prescient)

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; üôÇ
       fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       ;;indent-guides     ; highlighted indent columns
       (ligatures         ; ligatures and symbols to make your code pretty again
        +extra)
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +all +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       (treemacs +lsp)          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       (window-select +numbers)     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;; objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       (ibuffer +icons)         ; interactive buffer management
       (undo +tree)              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;; (:if (executable-find "aspell") spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       (lookup              ; navigate your code and its documentation
        +dictionary
        +docsets)
       (lsp +peek)
       (magit +forge)             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)                ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex             ; writing papers in Emacs has never been so fun
        +latexmk
        +cdlatex
        +fold)
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org               ; organize your plain life in plain text
        +attach
        +babel
        +capture
        +dragndrop
        +hugo
        +jupyter
        +export
        +pandoc
        +gnuplot
        +pretty
        +present
        +protocol
        +pomodoro
        +roam)
       php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp +pyright)            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       (ruby +rails +lsp)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       (scheme +guile)   ; a fully conniving family of lisps
       (sh +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       everywhere        ; *leave* Emacs!? You must be joking
       irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src

* ÈÖçÁΩÆ(config.el)
:PROPERTIES:
:header-args:emacs-lisp: :tangle "config.el" :comments no
:END:

#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

** ÈîÆÂÄºÁªëÂÆö
*** ÂÖ®Â±ÄÊåâÈîÆ

#+begin_src emacs-lisp
(global-set-key (kbd "M-g f") 'avy-goto-line)
(global-set-key (kbd "M-g w") 'avy-goto-word-1)
(global-set-key (kbd "C-'") 'imenu-list-smart-toggle)
#+end_src
*** Ëß£Áªë
#+begin_src emacs-lisp
(map! :niv      "C-s" nil
      :niv      "C-d" nil
      :niv      "C-i" nil
      :niv      "M-," nil
      :niv      "M-." nil

      "C-'" nil

      :leader
      "A" nil
      "X" nil
      "/" nil

      ;; remap
      [remap evil-undo] #'undo-tree-undo)


#+end_src
*** F1~F12
#+begin_src emacs-lisp
(global-set-key (kbd "<f3>") 'hydra-multiple-cursors/body)
(global-set-key (kbd "<f5>") 'deadgrep)
(global-set-key (kbd "<M-f5>") 'deadgrep-kill-all-buffers)
(global-set-key (kbd "<f12>") 'smerge-vc-next-conflict)
(global-set-key (kbd "<f11>") '+vc/smerge-hydra/body)
#+end_src
*** SPC

#+begin_src emacs-lisp
(map! :leader
      :n        "SPC"   #'execute-extended-command
      :n        "bf"   #'osx-lib-reveal-in-finder
      :n        "fo"   #'crux-open-with
      :n        "fj"   #'dired-jump
      :n        "/r"   #'deadgrep

      (:prefix ("l" . "load")
       :n       "i"     #'imenu-list
       :n       "o"     #'lsp-ui-imenu
       :n       "d"     #'deft
       :n       "l"     #'+workspace/switch-to)

      (:prefix ( "v" . "view" )
       :n       "o"     #'ivy-pop-view
       :n       "p"     #'ivy-push-view)

      :n        "w -"   #'split-window-below
      )
#+end_src
*** s-(Command)
#+begin_src emacs-lisp
(map! "s-<"     #'move-text-up
      "s->"     #'move-text-down
      "s-i"     #'gcl/string-inflection-cycle-auto)
      ;; "s-("     #'sp-backward-barf-sexp
      ;; "s-)"     #'sp-forward-barf-sexp)
#+end_src

*** C-(Control)

#+begin_src emacs-lisp
(map!
 "C-:"     #'avy-goto-char
 "C-;"     #'avy-goto-char-2
 "C-s"     #'+default/search-buffer

 ;; smartparen
 ;; "C-("     #'sp-backward-slurp-sexp
 ;; "C-)"     #'sp-forward-slurp-sexp

 ;; C-c
 "C-c a c"     #'org-mac-chrome-insert-frontmost-url
 "C-c d"       #'insert-current-date-time
 "C-c t"       #'insert-current-time
 "C-c o"       #'crux-open-with
 "C-c r"       #'vr/replace
 "C-c q"       #'vr/query-replace
 "C-c u"       #'crux-view-url
 "C-c y"       #'youdao-dictionary-search-at-point+

 ;; C-c l
 "C-c l o"      #'link-hint-open-link
 "C-c l c"      #'link-hint-copy-link
 "C-c l a"      #'link-hint-open-link-at-point
 "C-c l C"      #'link-hint-copy-link-at-point

 "C-a"          #'crux-move-beginning-of-line
 :niv      "C-e"     #'evil-end-of-line
 :niv      "C-="     #'er/expand-region
 )
#+end_src
*** M-(Alt/Option)

#+begin_src emacs-lisp
(map! "M--"     #'gcl/goto-match-paren
      "M-i"     #'parrot-rotate-next-word-at-point
      "M-f"     #'scroll-up-command)

(global-set-key (kbd "M-f") 'pyim-forward-word)
(global-set-key (kbd "M-b") 'pyim-backward-word)
#+end_src
*** evil

#+begin_src emacs-lisp
(map!
 :desc "Go function header"     :n "g[" #'beginning-of-defun
 :desc "Go function end"        :n "g]" #'end-of-defun
 :desc "Find definition"        :n "gd" #'xref-find-definitions
 :desc "Find reference"         :n "gD" #'xref-find-references
 :desc "Go back find piont"     :n "gb" #'xref-pop-marker-stack
 :desc "Delete parens"          :n "z-" #'sp-splice-sexp
 :desc "Wrap with markup"       :nv "z." #'emmet-wrap-with-markup
 :desc "Increase number"        :n "+"  #'evil-numbers/inc-at-pt
 :desc "Decrease number"        :n "-"  #'evil-numbers/dec-at-pt)
#+end_src

*** ÊåáÂÆöÊ®°ÂºèÊåâÈîÆ

#+begin_src emacs-lisp
 (map! :map web-mode-map
       "<f2>"    #'hydra-web-mode/body

       :map org-mode-map
       :n       "tt" #'org-todo
       :n       "tc" #'org-toggle-checkbox
       :n       "tpp" #'org-priority
       :n       "tpu" #'org-priority-up
       :n       "tpd" #'org-priority-down
       )
#+end_src

** ‰øùÂ≠òËá™Âä®ÂêåÊ≠•ÈÖçÁΩÆ

~gcl/async-shell-command-silently~ ÈùôÈªòÂºÇÊ≠•ÊâßË°åÂëΩ‰ª§ÔºåÂëΩ‰ª§‰ºöÂú® ~*mini buffer*~ ‰∏≠
ÊòæÁ§∫„ÄÇ

#+begin_src emacs-lisp
(defadvice! +literate-tangle-async-h ()
  "A very simplified version of `+literate-tangle-h', but async."
  :override #'+literate-tangle-h
  (let ((default-directory doom-private-dir))
    (gcl/async-shell-command-silently (format "emacs --batch --eval \"(progn \
(require 'org) (setq org-confirm-babel-evaluate nil) \
(org-babel-tangle-file \\\"%s\\\"))\" \
&& /bin/bash ~/.gclrc/shl/cp-config-org.sh"
             +literate-config-file))))
#+end_src
** Âü∫Êú¨ÈÖçÁΩÆ(Basic)

#+begin_src emacs-lisp
;; ÂêØÂä®ÂÖ®Â±è
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(add-hook 'org-mode-hook 'turn-on-auto-fill)

;; ‰∏™‰∫∫‰ø°ÊÅØÈÖçÁΩÆ
(setq user-full-name "Zhicheng Lee"
      user-mail-address "gccll.love@gmail.com"
      user-blog-url "https://www.cheng92.com")

;; setq, set-default Áªü‰∏ÄÈÖçÁΩÆÁöÑÂú∞Êñπ
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq org-directory "~/github/documents/org")
(setq display-line-numbers-type t)

(setq-default
 fill-column 80
 undo-limit 80000000
 delete-by-moving-to-trash t
 window-combination-resize t
 delete-trailing-lines t
 x-stretch-cursor t)

(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))

;; ÂºÄÂêØÊ®°Âºè
(global-undo-tree-mode 1)
#+end_src

** ‰∏ªÈ¢òÈÖçÁΩÆ

#+begin_src emacs-lisp
(setq doom-theme 'doom-vibrant)

;; (setq doom-font (font-spec :family "JetBrains Mono" :size 16))
(setq doom-font (font-spec :family "Fira Code" :size 16))
#+end_src

ËÆæÁΩÆÊ†áÈ¢òÔºö
#+begin_src emacs-lisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "‚ò∞ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ‚óâ %s" " ‚ÄÜ‚óè‚ÄÜ %s") project-name))))))
#+end_src
** packages ÈÖçÁΩÆ
*** avy
#+begin_src emacs-lisp
(after! avy
  ;; home row priorities: 8 6 4 5 - - 1 2 3 7
  (setq avy-keys '(?n ?e ?i ?s ?t ?r ?i ?a)))
#+end_src
*** bookmark

#+begin_src emacs-lisp
(map!
 "C-c b d"      #'bm-remove-all-current-buffer
 "C-c b D"      #'bm-remove-all-all-buffers
 "C-c b n"      #'bm-next
 "C-c b p"      #'bm-previous
 "C-c b t"      #'bm-toggle
 "C-c b l"      #'bm-show-all)
#+end_src

bm package
#+begin_src emacs-lisp
 (use-package! bm
    :demand t
    :init
    (setq bm-restore-repository-on-load t)
    :config

    (bind-keys
     :map bm-show-mode-map
     ("j" . next-line)
     ("k" . previous-line))

    (setq bm-cycle-all-buffers t
          bm-highlight-style 'bm-highlight-only-fringe
          bm-repository-size 1000)
    (setq-default bm-buffer-persistence t)

    (defun adq/bm-save ()
      "Save bookmarks to persistent repository."
      (interactive)
      (bm-buffer-save-all)
      (bm-repository-save))

    (advice-add 'bm-bookmark-add
                :after (lambda (&rest args)
                         (adq/bm-save)))
    (advice-add 'bm-bookmark-remove
                :after (lambda (&rest args)
                         (adq/bm-save)))
    (add-hook 'after-init-hook #'bm-repository-load)
    (add-hook 'find-file-hooks #'bm-buffer-restore)
    (add-hook 'after-rever-hook #'bm-buffer-restore)
    (add-hook 'kill-buffer-hook #'bm-buffer-save)
    (add-hook 'after-save-hook #'bm-buffer-save)
    (add-hook 'kill-emacs-hook
              (lambda ()
                (bm-buffer-save-all)
                (bm-repository-save))))
#+end_src
*** color-rg

#+begin_src emacs-lisp
(use-package! color-rg
  :commands (color-rg-search-input
             color-rg-search-symbol
             color-rg-search-input-in-project)
  :bind
  (:map isearch-mode-map
   ("M-s M-s" . isearch-toggle-color-rg)))
#+end_src
*** compay
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.
#+end_src
*** TODO EAF

[[https://www.gtrun.org/custom/config.html][GuangTao‚Äôs Doom Emacs config]]

#+begin_src emacs-lisp
;; (when (display-graphic-p)
;;   (use-package! eaf
;;     :if (eq system-type 'gnu/linux)
;;     :custom
;;     (eaf-find-alternate-file-in-dired t)
;;     :config
;;     (add-hook! 'eaf-mode-hook 'xah-fly-keys-off)

;;     (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
;;     (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)

;;     (defun eaf-open-google ()
;;       "Open Google using EAF."
;;       (interactive)
;;       (eaf-open-browser "https://www.google.com")))
#+end_src

*** evil ÈÖçÁΩÆ

#+begin_src emacs-lisp

(defalias 'ex! 'evil-ex-define-cmd)

;; Âø´Êç∑Êìç‰ΩúÔºåÈÄöËøá : ÂÜíÂè∑ËøõÂÖ• evil ÂëΩ‰ª§Ê®°Âºè
;; File operations
(ex! "cp"          #'+evil:copy-this-file)
(ex! "mv"          #'+evil:move-this-file)
(ex! "rm"          #'+evil:delete-this-file)

;; window Êìç‰Ωú
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src
*** deadgrepÔºåÊîØÊåÅÊ≠£Âàô

Ê≠£ÂàôÊêúÁ¥¢Ë¶ÅÂú®ÊêúÁ¥¢ÁöÑÁªìÊûú‰∏≠ÔºåÈÄâ‰∏≠ _regexp_ Êù•Á≠õÈÄâ„ÄÇ

ÊåâÈîÆÁªëÂÆöÔºö

| key       | func                        |
|-----------+-----------------------------|
| <f5>      | ~deadgrep~                  |
| M-<f5>    | ~deadgrep-kill-all-buffers~ |
|-----------+-----------------------------|
| ~RET~     | Êü•ÁúãÁªìÊûú                    |
| ~o~       | Âú®Âè¶‰∏Ä‰∏™Á™óÂè£ÊâìÂºÄ            |
| ~n/p~     | ÁªìÊûú‰∏≠‰∏ä‰∏ãÁßªÂä®              |
| ~M-n/M-p~ | Êñá‰ª∂Â§¥Â∞æ‰πãÈó¥ÁßªÂä®            |
| ~g~       | ÈáçÊñ∞ÊêúÁ¥¢                    |
| ~TAB~     | Â±ïÂºÄ/Èó≠ÂêàÁªìÊûú               |
| ~C-c C-k~ | ÂÅúÊ≠¢Ê≠£Âú®ÊâßË°åÁöÑÊêúÁ¥¢          |
*** highlight-indent-guides

#+begin_src emacs-lisp
(use-package! highlight-indent-guides
  :config
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-auto-enabled nil)
  (set-face-background 'highlight-indent-guides-even-face "dimgray")
  (set-face-foreground 'highlight-indent-guides-character-face "dimgray"))
#+end_src

*** hungry-delete

#+begin_src emacs-lisp
(use-package! hungry-delete
  :config
  (add-hook! 'after-init-hook #'global-hungry-delete-mode))
#+end_src
*** iedit

#+begin_src emacs-lisp 
 (use-package! maple-iedit
    :commands (maple-iedit-match-all maple-iedit-match-next maple-iedit-match-previous)
    :config
    (delete-selection-mode t)
    (setq maple-iedit-ignore-case t)
    (defhydra maple/iedit ()
      ("n" maple-iedit-match-next "next")
      ("t" maple-iedit-skip-and-match-next "skip and next")
      ("T" maple-iedit-skip-and-match-previous "skip and previous")
      ("p" maple-iedit-match-previous "prev"))
    :bind (:map evil-visual-state-map
           ("n" . maple/iedit/body)
           ("C-n" . maple-iedit-match-next)
           ("C-p" . maple-iedit-match-previous)
           ("C-t" . map-iedit-skip-and-match-next)
           ("C-T" . map-iedit-skip-and-match-previous)))
#+end_src

*** golden-ratio

#+begin_src emacs-lisp
(setq golden-ratio-exclude-modes
      '("calendar-mode"
        "org-agenda-mode"
        "help-mode"
        "dired-mode"
        "ranger-mode"
        "helpful-mode"
        "rxt-help-mode"
        "treemacs-mode" ))
  (setq golden-ratio-exclude-buffer-names
      '("*Org tags*"
        "*Org todo*"
        "*info*"
        "*Messages*"))

(use-package! golden-ratio
  :after-call pre-command-hook
  :config
  (golden-ratio-mode +1)
  ;; Using this hook for resizing windows is less precise than
  ;; `doom-switch-window-hook'.
  (remove-hook 'window-configuration-change-hook #'golden-ratio)
  (add-hook 'doom-switch-window-hook #'golden-ratio))
#+end_src
*** good-scroll

#+begin_src emacs-lisp
(use-package! good-scroll
  :config
  (good-scroll-mode 1))
(global-set-key [remap evil-scroll-up] #'good-scroll-up)
(global-set-key [remap evil-scroll-down] #'good-scroll-down)
(global-set-key [remap evil-scroll-page-up] #'good-scroll-down-full-screen)
(global-set-key [remap evil-scroll-page-down] #'good-scroll-up-full-screen)
#+end_src
*** link-hint

ÈìæÊé•ÁÆ°ÁêÜ„ÄÇ

#+begin_src emacs-lisp
(use-package! link-hint
  :config
  (setq browse-url-browser-function 'browse-url-chromium
        browse-url-generic-args '("--target" "tab")))
#+end_src
*** search & replace

#+begin_src emacs-lisp
(use-package! visual-regexp
  :commands (vr/select-replace vr/select-query-replace))

(use-package! visual-regexp-steriods
  :commands (vr/select-replace vr/select-query-replace))
#+end_src
*** ein, emacs-ipython-notebook

#+begin_src emacs-lisp
(use-package! ein
  :config
  (setq ob-ein-languages
   (quote
    (("ein-python" . python)
     ("ein-R" . R)
     ("ein-r" . R)
     ("ein-rust" . rust)
     ("ein-haskell" . haskell)
     ("ein-julia" . julia))))
  )

(after! ein:ipynb-mode                  ;
  (poly-ein-mode 1)
  (hungry-delete-mode -1)
  )
#+end_src
*** pyim

ÈÖçÁΩÆÊù•Ê∫êÔºö[[https://github.com/eggcaker/.doom.d/blob/main/modules/private/my-chinese/config.el][.doom.d/config.el at main ¬∑ eggcaker/.doom.d]]

Áõ¥Êà™‰ΩøÁî® Rime - Squirrel Â∞±ÂèØ‰ª•‰∫ÜÔºåÁî®Â§ñÈÉ®ÂÖ∂‰ªñÁöÑ‰∏ªË¶ÅÂ∞±ÊòØÂç°„ÄÇ

#+begin_src emacs-lisp
;; (defvar +my-ext-dir (expand-file-name "~/.doom.d/extensions"))
;; (setq-default pyim-english-input-switch-functions
;;               '(pyim-probe-dynamic-english
;;                 pyim-probe-isearch-mode
;;                 pyim-probe-program-mode
;;                 pyim-probe-org-structure-template))
;; (setq-default pyim-punctuation-half-width-functions
;;               '(pyim-probe-punctuation-line-beginning
;;                 pyim-probe-punctuation-after-punctuation))

;; (use-package! pyim
;;   :demand t
;;   :defer 1
;;   :diminish pyim-isearch-mode
;;   :init
;;   (setq default-input-method "pyim"
;;         pyim-title "„Ñì"
;;         pyim-default-scheme 'rime
;;         pyim-page-length 7
;;         pyim-page-tooltip 'posframe) ;;'popup) ;;proframe)

;;   :config
;;   (setq-default pyim-english-input-switch-functions
;;                 '(pyim-probe-dynamic-english
;;                   pyim-probe-evil-normal-mode
;;                   pyim-probe-program-mode
;;                   pyim-probe-org-structure-template))

;;   (setq-default pyim-punctuation-half-width-functions
;;                 '(pyim-probe-punctuation-line-beginning
;;                   pyim-probe-punctuation-after-punctuation)))

;; (defvar liberime-is-loaded nil)

;; (use-package! liberime
;;   :when (featurep! +rime)
;;   :load-path (lambda()(expand-file-name "liberime" +my-ext-dir))
;;   :defer 1
;;   :unless liberime-is-loaded
;;   :custom
;;   (rime_share_data_dir "/Library/Input Methods/Squirrel.app/Contents/SharedSupport/")
;;   (rime_user_data_dir (expand-file-name "rime" +my-ext-dir))
;;   :init
;;   (module-load (expand-file-name "liberime.so" +my-ext-dir))
;;   :config
;;   (setq liberime-is-loaded t)
;;   (liberime-start rime_share_data_dir rime_user_data_dir)
;;   (liberime-select-schema  "wubi_pinyin")) ;;"wubi_pinyin"))  luna_pinyin_simp"))

;; ;; ‰∏≠Ëã±Êñá‰πãÈó¥Ê∑ªÂä†Á©∫Ê†º
;; (use-package! pangu-spacing
;;   :hook (text-mode . pangu-spacing-mode)
;;   :config
;;   ;; Always insert `real' space in org-mode .
;;   (setq-hook! 'org-mode-hook pangu-spacing-real-insert-separtor t))

;; (use-package! fcitx
;;   :after evil
;;   :config
;;   (when (executable-find "fcitx-remote")
;;     (fcitx-evil-turn-on)))

;; (use-package! ace-pinyin
;;   :after avy
;;   :init (setq ace-pinyin-use-avy t)
;;   :config (ace-pinyin-global-mode t))

;;; Hacks

;; (defun +chinese*org-html-paragraph (paragraph contents info)
;;   "Join consecutive Chinese lines into a single long line without unwanted space
;; when exporting org-mode to html."
;;   (let* ((fix-regexp "[[:multibyte:]]")
;;          (origin-contents contents)
;;          (fixed-contents
;;           (replace-regexp-in-string
;;            (concat "\\(" fix-regexp "\\) *\n *\\(" fix-regexp "\\)")
;;            "\\1\\2"
;;            origin-contents)))
;;     (list paragraph fixed-contents info)))
;; (advice-add #'org-html-paragraph :filter-args #'+chinese*org-html-paragraph)
#+end_src

[[https://gist.github.com/merrickluo/553f39c131d0eb717cd59f72c9d4b60d][Use pyim + liberime in doom-emacs]]

[[https://github.com/merrickluo/liberime][merrickluo/liberime: A emacs dynamic module provide librime bindings for emacs]]

[[https://github.com/tumashu/pyim][tumashu/pyim: ‰∏Ä‰∏™ emacs ‰∏≠ÊñáËæìÂÖ•Ê≥ïÔºåÊîØÊåÅÂÖ®ÊãºÔºåÂèåÊãºÔºå‰∫îÁ¨îÔºå‰ªìÈ¢âÂíåRimeÔºåpyim ÊòØ GNU elpa ÂåÖ„ÄÇ]]

[[https://github.com/DogLooksGood/emacs-rime/blob/master/INSTALLATION.org][emacs-rime/INSTALLATION.org at master ¬∑ DogLooksGood/emacs-rime]]

[[https://rime.im/download/][‰∏ãËºâÂèäÂÆâË£ù | RIME | ‰∏≠Â∑ûÈüªËº∏ÂÖ•Ê≥ïÂºïÊìé]]

[[https://manateelazycat.github.io/emacs/2019/07/24/use-rime-in-emacs.html][Âú®MacÁâàÁöÑEmacs‰∏≠‰ΩøÁî®RIMEËæìÂÖ•Ê≥ï]]

[[https://github.com/tumashu/pyim-greatdict][tumashu/pyim-greatdict: A chinese-pyim dict, which include three million words!]]
*** js-doc

#+begin_src emacs-lisp
(use-package! js-doc
  :bind (:map js2-mode-map
         ("C-c i" . js-doc-insert-function-doc)
         ("@" . js-doc-insert-tag))
  :config
  (setq js-doc-mail-address user-mail-address
       js-doc-author (format "%s<%s>" user-full-name js-doc-mail-address)
       js-doc-url user-blog-url
       js-doc-license "MIT"))

#+end_src
*** flycheck

‰ΩøÁî®È°πÁõÆÊú¨Ë∫´ÁöÑ eslint, ~node_modules/.bin/eslint~

#+begin_src emacs-lisp
(use-package! flycheck
    :config
    (add-hook 'after-init-hook 'global-flycheck-mode)
    (add-hook 'flycheck-mode-hook 'gcl/use-eslint-from-node-modules))
#+end_src
*** leetcode

#+begin_src emacs-lisp
(after! leetcode
  (setq leetcode-prefer-language "javascript"
        leetcode-prefer-sql "mysql"
        leetcode-save-solutions t
        leetcode-directory "~/github/make-leetcode"))
#+end_src
*** lsp
#+begin_src emacs-lisp
(use-package! lsp-mode
  :hook ((web-mode . lsp)
         (rjsx-mode . lsp)
         (typescript-mode . lsp)
         ;; (vue-mode . lsp)
         (python-mode . lsp)
         (go-mode . lsp)
         (css-mode . lsp)
         (js2-mode . lsp))
  :commands lsp
  :config
  (setq lsp-idle-delay 0.2
        lsp-enable-file-watchers nil))

(use-package! lsp-ui
  :commands lsp-ui-mode
  :config
  (setq lsp-headerline-breadcrumb-enable t ; Â∑¶‰∏äËßíÊòæÁ§∫Êñá‰ª∂Ë∑ØÂæÑ
        lsp-lens-enable t                  ; ÊòæÁ§∫Ë¢´ÂºïÁî®Ê¨°Êï∞
        ))

;; ÂÖ≥Èó≠Ëá™Âä®Ê†ºÂºèÂåñÔºåÂÖ®Â±ÄÂÖ≥Èó≠
;; (setq +form-with-lsp nil)
;; ÊåáÂÆöÊ®°Âºè
;; (setq-hook! 'typescript-mode-hook +format-with-lsp nil)
;; (setq-hook! 'typescript-tsx-mode-hook +format-with-lsp nil)

#+end_src
*** (ma)git

#+begin_src emacs-lisp
(use-package! git-gutter
  :config
  (global-git-gutter-mode 't))
#+end_src
*** org-mode

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda () (display-line-numbers-mode -1)))

;; (org-agenda-files  `(,(expand-file-name "agenda.org" org-directory)))
;; Ëá™Âä®ÈöêËóè */~= Á¨¶Âè∑
;; (org-hide-emphasis-markers t)
;; (org-module  '(org-habit org-checklist))

(use-package! org-fancy-priorities
  :diminish
  :hook (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("üÖ∞" "üÖ±" "üÖ≤" "üÖ≥" "üÖ¥")))

(use-package! org-pretty-tags
  :diminish org-pretty-tags-mode
  :config
  (setq org-pretty-tags-surrogate-strings
        '(("work"  . "‚öí")))

  (org-pretty-tags-global-mode))
#+end_src

Ë°®Ê†ºÊèí‰ª∂Ôºö valign

[[https://github.com/casouri/valign][GitHub - casouri/valign: Pixel-perfect visual alignment for Org and Markdown
tables.]]

#+begin_src emacs-lisp
 (use-package! valign
   :custom
   (valign-fancy-bar t)
   :hook
   (org-mode . valign-mode))
#+end_src

org-roam

#+begin_src emacs-lisp
 ;; (setq org-roam-directory "~/.doom.d/.local/roam/")
 ;; (use-package org-roam-server
 ;;   :after (org-roam server)
 ;;   :config
 ;;   (setq org-roam-server-host "127.0.0.1"
 ;;         org-roam-server-port 8078
 ;;         org-roam-server-export-inline-images t
 ;;         org-roam-server-authenticate nil
 ;;         org-roam-server-network-label-truncate t
 ;;         org-roam-server-network-label-truncate-length 60
 ;;         org-roam-server-network-label-wrap-length 20)
 ;;   (defun org-roam-server-open ()
 ;;     "Ensure the server is active, then open the roam graph."
 ;;     (interactive)
 ;;     (org-roam-server-mode 1)
 ;;     (browse-url-xdg-open (format "http://localhost:%d" org-roam-server-port))))
#+end_src

org-ol-tree ÁõÆÂΩïÊ†ë
#+begin_src emacs-lisp
(use-package! org-ol-tree
  :commands org-ol-tree)
(map! :map org-mode-map
      :after org
      :localleader
      :desc "Outline" "O" #'org-ol-tree)
#+end_src

ËÆ© latex ÂØºÂá∫ÁªìÊûúÈ´ò‰∫ÆÊòæÁ§∫
#+begin_src emacs-lisp
(use-package! engrave-faces-latex
  :after ox-latex)
#+end_src

github markdown in org-mode

#+begin_src emacs-lisp
(use-package! ox-gfm
  :after org)
#+end_src

ÂÖ∂‰ªñÊ†ºÂºèËΩ¨Êàê org
#+begin_src emacs-lisp
(use-package! org-pandoc-import
  :after org)
#+end_src

ÈöêËóè ~=#*_ Á≠âÊ†ºÂºèÂåñÂ≠óÁ¨¶
#+begin_src emacs-lisp
(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks nil)
  ;; for proper first-time setup, `org-appear--set-elements'
  ;; needs to be run after other hooks have acted.
  (run-at-time nil nil #'org-appear--set-elements))
#+end_src

~[[yt:...]]~ ÂµåÂÖ• youtube ËßÜÈ¢ë
#+begin_src emacs-lisp
(org-link-set-parameters "yt" :export #'+org-export-yt)
(defun +org-export-yt (path desc backend _com)
  (cond ((org-export-derived-backend-p backend 'html)
         (format "<iframe width='440' \
height='335' \
src='https://www.youtube.com/embed/%s' \
frameborder='0' \
allowfullscreen>%s</iframe>" path (or "" desc)))
        ((org-export-derived-backend-p backend 'latex)
         (format "\\href{https://youtu.be/%s}{%s}" path (or desc "youtube")))
        (t (format "https://youtu.be/%s" path))))
#+end_src

*** parrot, Â§öÂçïËØçÂàáÊç¢

ÂºÄÂêØÂÖ®Â±ÄÊ®°ÂºèÔºö
#+begin_src emacs-lisp
(use-package! parrot
  :config
  (parrot-mode))
#+end_src

ÂÖ∑‰ΩìÂàáÊç¢Êï∞ÊçÆÈÖçÁΩÆÔºö
#+begin_src emacs-lisp
(setq parrot-rotate-dict
      '(
        (:rot ("alpha" "beta") :caps t :lower nil)
        ;; => rotations are "Alpha" "Beta"

        (:rot ("snek" "snake" "stawp"))
        ;; => rotations are "snek" "snake" "stawp"

        (:rot ("yes" "no") :caps t :upcase t)
        ;; => rotations are "yes" "no", "Yes" "No", "YES" "NO"

        (:rot ("&" "|"))
        ;; => rotations are "&" "|"
        ;; default dictionary starts here ('v')
        (:rot ("begin" "end") :caps t :upcase t)
        (:rot ("enable" "disable") :caps t :upcase t)
        (:rot ("enter" "exit") :caps t :upcase t)
        (:rot ("forward" "backward") :caps t :upcase t)
        (:rot ("front" "rear" "back") :caps t :upcase t)
        (:rot ("get" "set") :caps t :upcase t)
        (:rot ("high" "low") :caps t :upcase t)
        (:rot ("in" "out") :caps t :upcase t)
        (:rot ("left" "right") :caps t :upcase t)
        (:rot ("min" "max") :caps t :upcase t)
        (:rot ("on" "off") :caps t :upcase t)
        (:rot ("prev" "next"))
        (:rot ("start" "stop") :caps t :upcase t)
        (:rot ("true" "false") :caps t :upcase t)
        (:rot ("&&" "||"))
        (:rot ("==" "!="))
        (:rot ("===" "!=="))
        (:rot ("." "->"))
        (:rot ("if" "else" "elif"))
        (:rot ("ifdef" "ifndef"))
        ;; javascript
        (:rot ("var" "let" "const"))
        (:rot ("null" "undefined"))
        (:rot ("number" "object" "string" "symbol"))

        ;; c/...
        (:rot ("int8_t" "int16_t" "int32_t" "int64_t"))
        (:rot ("uint8_t" "uint16_t" "uint32_t" "uint64_t"))
        (:rot ("1" "2" "3" "4" "5" "6" "7" "8" "9" "10"))
        (:rot ("1st" "2nd" "3rd" "4th" "5th" "6th" "7th" "8th" "9th" "10th"))

        ;; org
        (:rot ("DONE" "DOING" "WAITING" "PENDING"))
        (:rot ("increment", "decrement"))

        ))
#+end_src
*** ranger

#+begin_src emacs-lisp
;; ranger true
(after! ranger
  :config
  (setq ranger-show-literal nil))
#+end_src

*** snippets

#+begin_src emacs-lisp
(setq yas-triggers-in-field t)

(use-package! doom-snippets             ; hlissner
  :after yasnippet)

(use-package! yasnippet-snippets        ; AndreaCrotti
  :after yasnippet)
#+end_src
*** smartparen

#+begin_src emacs-lisp
(sp-local-pair
 '(org-mode)
 "<<" ">>"
 :actions '(insert))

(use-package! smartparens
  :init
  (map! :map smartparens-mode-map
       "C-)" #'sp-forward-slurp-sexp
       "C-(" #'sp-forward-barf-sexp
       "C-{" #'sp-backward-slurp-sexp
       "C-}" #'sp-backward-barf-sexp
       ))
#+end_src
*** tramp

#+begin_src emacs-lisp
(use-package! counsel-tramp
  :config
  (setq tramp-default-method "sshx")
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
  ;; (setq counsel-tramp-custom-connections
  ;;       '(/ssh:domain|sudo:root@192.168.88.158:/var/www/html/))
  (add-hook 'counsel-tramp-pre-command-hook '(lambda () (projectile-mode 0)
                                               (editorconfig-mode 0)))
  (add-hook 'counsel-tramp-quit-hook '(lambda () (projectile-mode 1)
                                        (editorconfig-mode 1))))
(define-key global-map (kbd "C-c s") 'counsel-tramp)
#+end_src
*** tree-sitter

#+begin_example
Tree-sitter is a general programming language parser that efficiently builds and updates Abstract Syntax Trees (AST) for your code. Basically, it can read programming languages and understand the structure and meaning of code without having to execute it. Among many amazing things, one of its best and simplest features to take advantage of is richer syntax highlighting, which is what I use it for in Emacs.

‚Äî https://hungyi.net/posts/use-emacs-tree-sitter-doom-emacs/
#+end_example

#+begin_src emacs-lisp
;; (add-transient-hook! 'prog-mode-hook
;;  (require 'tree-sitter-langs)
;;  (global-tree-sitter-mode))

;; (add-hook! 'tree-sitter-after-on-hook
;;          #'tree-sitter-hl-mode)
#+end_src

*** web dev

#+begin_src emacs-lisp
(setq css-indent-offset 2
      js2-basic-offset 2
      js-switch-indent-offset 2
      js-indent-level 2
      js2-mode-show-parse-errors nil
      js2-mode-show-strict-warnings nil
      web-mode-attr-indent-offset 2
      web-mode-code-indent-offset 2
      web-mode-css-indent-offset 2
      web-mode-markup-indent-offset 2
      web-mode-enable-current-element-highlight t
      web-mode-enable-current-column-highlight t)
(setq-default typescript-indent-level 2)

;; (use-package! rjsx-mode)

(defun maybe-use-prettier ()
  "Enable prettier-js-mode if an rc file is located."
  (if (locate-dominating-file default-directory ".prettierrc")
      (prettier-js-mode +1)))
(add-hook 'typescript-mode-hook 'maybe-use-prettier)
(add-hook 'js2-mode-hook 'maybe-use-prettier)
(add-hook 'web-mode-hook 'maybe-use-prettier)
(add-hook 'rjsx-mode-hook 'maybe-use-prettier)
#+end_src

hydra ÈÖçÁΩÆ
#+begin_src emacs-lisp
;; web-mode hydra
(defhydra hydra-web-mode (:color blue :quit-key "q" :hint nil)
  "
^Element^                       ^Element^                       ^Attribute^             ^Block
^^^^^^^^---------------------------------------------------------------------------------------------
_a_ : Select content            _r_ : Rename                    _0_ : Start             _<_ : Begin
_b_ : Start                     _s_ : Select                    _9_ : End               _>_ : End
_c_ : Clone                     _t_ : Move Down                 _*_ : Insert            _-_ : Select
_e_ : End                       _u_ : Parent                    _N_ : Next
_f_ : Fold/unfold children      _v_ : Delete without content    _P_ : Previous                  _k_
_i_ : Insert                    _w_ : Wrap Element              _S_ : Select                _h_      _l_
_I_ : Insert cursor             _t_ : Last(open/close)          _X_ : Delete                    _j_
_K_ : Delete                    _T_ : Next(open/close)          _M_ : Match tag
_n_ : Next                      _._ : Wrap Markup               _A_ : Sort
_p_ : Previous
"
  ("a" web-mode-element-content-select)
  ("b" web-mode-element-beginning :exit nil)
  ("c" web-mode-element-clone)
  ("e" web-mode-element-end :exit nil)
  ("f" web-mode-element-children-fold-or-unfold :exit nil)
  ("F" web-mode-fold-unfold :exit nil)
  ("i" web-mode-element-insert)
  ("I" web-mode-element-insert-at-point)
  ("K" web-mode-element-kill)
  ("m" web-mode-element-mute-blanks)
  ("n" web-mode-element-next :color "pink" :exit nil)
  ("p" web-mode-element-previous :color "pink" :exit nil)
  ("r" web-mode-element-rename)
  ("s" web-mode-element-select)
  ("t" web-mode-element-transpose)
  ("u" web-mode-element-parent :color "pink" :exit nil)
  ("v" web-mode-element-vanish)
  ("w" web-mode-element-wrap)
  ("t" web-mode-tag-previous :color "pink" :exit nil)
  ("T" web-mode-tag-next :color "pink" :exit nil)
  ("." emmet-wrap-with-markup)
  ("q" nil "quit" :exit t)
  ;; attribute
  ("0" web-mode-attribute-beginning :exit nil)
  ("9" web-mode-attribute-end :exit nil)
  ("*" web-mode-attribute-insert)
  ("X" web-mode-attribute-kill)
  ("A" web-mode-tag-attributes-sort :exit nil)
  ("K" web-mode-element-kill)
  ("M" web-mode-tag-match :exit nil :color "pink")
  ("N" web-mode-attribute-next :exit nil :color "pink")
  ("P" web-mode-attribute-previous :exit nil :color "pink")
  ("S" web-mode-attribute-select)
  ;; block
  ("<" web-mode-block-next :exit nil :color "pink")
  (">" web-mode-block-previous :exit nil :color "pink")
  ("-" web-mode-block-select)
  ;; movement
  ("j" next-line :exit nil :color "blue")
  ("k" previous-line :exit nil :color "blue")
  ("h" backward-char :exit nil :color "blue")
  ("l" forward-char :exit nil :color "blue")
  )
#+end_src
*** which-key

Doom Emacs default configuration is too slow, let‚Äôs speed it up.

#+begin_src emacs-lisp
(after! which-key
  (setq! which-key-idle-delay 0.1
         which-key-idle-secondary-delay 0.2))
#+end_src
*** misc packages

#+begin_src emacs-lisp
(use-package! dotenv-mode
  :mode ("\\.env\\.?.*\\'" . dotenv-mode))
#+end_src
*** zoom

#+begin_src emacs-lisp
;; (use-package! zoom
;;   :hook ((doom-first-input . zoom-mode))
;;   :config
;;   (setq zoom-size '(0.8 . 0.8)
;;         zoom-ignored-major-modes '(dired-mode vterm-mode help-mode helpful-mode rxt-help-mode help-mode-menu org-mode)
;;         zoom-ignored-buffer-names '("*doom:scratch*" "*info*" "*helpful variable: argv*")
;;         zoom-ignored-buffer-name-regexps '("^\\*calc" "\\*helpful variable: .*\\*")
;;         zoom-ignore-predicates (list (lambda () (> (count-lines (point-min) (point-max)) 20)))))
#+end_src
* ÂåÖÁÆ°ÁêÜ(packages.el)
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments no
:END:

This file shouldn't be byte compiled.
#+begin_src emacs-lisp :tangle "packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+end_src

#+begin_src emacs-lisp
;; (when IS-LINUX
;;   (package! eaf :recipe (:host github
;;                             :repo "manateelazycat/emacs-application-framework"
;;                             :files ("*")
;;                             :no-byte-compile t))

(package! move-text)
(package! parrot)
;; fast, friendly searching with ripgrep and Emacs
(package! deadgrep)
(package! color-rg :recipe (:host github :repo "manateelazycat/color-rg"))
(package! ranger)
(package! youdao-dictionary)
;; http://www.baidu.com
(package! link-hint)
(package! deft)
(package! anzu)
(package! pangu-spacing)
(package! visual-regexp)
(package! visual-regexp-steriods
  :recipe (:host github :repo "benma/visual-regexp-steroids.el"))
(package! osx-lib)
(package! crux)
(package! string-inflection)
(package! cnfonts)
(package! valign)
(package! dotenv-mode)
(package! good-scroll :recipe (:host github
                               :repo "io12/good-scroll.el"))
(package! maple-iedit :recipe (:host github
                               :repo "honmaple/emacs-maple-iedit"))

(package! hungry-delete)
(package! bm)
(package! highlight-indent-guides)

;; window
(package! golden-ratio)
;; (package! zoom)

(package! counsel-tramp)
#+end_src

funny:
#+begin_src emacs-lisp
;; type sound
(package! selectric-mode :pin "1840de71f7414b7cd6ce425747c8e26a413233aa")
#+end_src

org packages:
#+begin_src emacs-lisp
(package! org-fancy-priorities)
(package! org-pretty-tags)
(package! org-pretty-table
  :recipe (:host github :repo "Fuco1/org-pretty-table")
  :pin "87772a9469d91770f87bfa788580fca69b9e697a")
;; ~=/* Á¨¶Âè∑ÊòæÁ§∫‰ºòÂåñ
(package! org-appear :recipe (:host github :repo "awth13/org-appear")
  :pin "6ee49875f8bdefafbde849f5628d673e9740cf8c")
;; ÁÆóÊúØÁ¨¶Âè∑ÊòæÁ§∫ÔºåÂ¶Ç x ÁöÑÂπ≥Êñπ $a^2$ -> ÂØπÂ∫îÊï∞Â≠¶Ë°®Á§∫ÂûãÂºè
(package! org-fragtog :pin "0151cabc7aa9f244f82e682b87713b344d780c23")
;; ÁõÆÂΩïÊ†ë
(package! org-ol-tree :recipe (:host github :repo "Townk/org-ol-tree")
  :pin "207c748aa5fea8626be619e8c55bdb1c16118c25")
(package! engrave-faces :recipe (:host github :repo "tecosaur/engrave-faces"))
(package! ox-gfm :pin "99f93011b069e02b37c9660b8fcb45dab086a07f")
(package! org-pandoc-import :recipe
  (:host github :repo "tecosaur/org-pandoc-import" :files ("*.el" "filters" "preprocessors")))
(package! org-roam-server :pin "2122a61e9e9be205355c7e2c1e4b65986d6985a5" :disable t)
(package! org-roam :disable t)
#+end_src

pyim packages:
#+begin_src emacs-lisp
;; (package! rime)
;; (package! liberime)
;; (package! pyim)
;; (package! fcitx)
;; (package! ace-pinyin)
;; (package! posframe :recipe (:host github :repo "tumashu/posframe"))
#+end_src

dev packages:
#+begin_src emacs-lisp
(package! leetcode)
(package! instant-rename-tag
  :recipe (:host github :repo "manateelazycat/instant-rename-tag"))
(package! js-doc)
(package! imenu-list)
(package! yasnippet-snippets)
(package! git-gutter)

;; web
(package! web-beautify)
(package! prettier-js)
(package! ob-typescript)
(package! phpactor)

(package! ein :recipe (:host github
                       :repo "millejoh/emacs-ipython-notebook"
                       :files ("lisp/*.el")
                       :build (:not compile)))

;; ast


#+end_src

disabled packages
#+begin_src  emacs-lisp
(package! bookmark :disable t)
(package! tree-sitter :disable t)
(package! tree-sitter-langs :disable t)
(package! import-js :disable t)
(package! tide :disable t)
(package! eldoc :disable t)
(package! vue-mode :disable t)
#+end_src


* rime

[[https://github.com/maomiui/rime][maomiui/rime: Rime Èº†È°ªÁÆ°ÔºàSquirrelÔºâÊúôÊúàÊãºÈü≥ÔΩúÂ∞èÈπ§ÂèåÊãºÔΩúËá™ÁÑ∂Á†ÅÂèåÊãºÈÖçÁΩÆ]]
* emacs install

[[https://emacs-china.org/t/nix-mac-emacs-nativecomp/14509/20][Nix + Mac Áî®Êà∑Áé∞Âú®ÂèØ‰ª•Áõ¥Êé•‰∏ãËΩΩÁºñËØëÂ•ΩÁöÑ emacs-nativecomp ÂèØÊâßË°åÊñá‰ª∂‰∫Ü - Emacs-general - Emacs China]]
* issues

1. Device 1 is not a termcap terminal device.

   [[https://github.com/syl20bnr/spacemacs/issues/13391][Xserver Error in Wsl: Device 1 is not a termcap terminal device. ¬∑ Issue #13391 ¬∑ syl20bnr/spacemacs]]

   [[https://github.com/microsoft/WSL/issues/5065][[WSL2] [Interop] Keep a single shared /run/WSL/* socket ¬∑ Issue #5065 ¬∑ microsoft/WSL]]

   #+begin_src bash
   # add to .zshrc
   export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0
   #+end_src
